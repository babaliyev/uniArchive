--
-- ARCH  (User) 
--
CREATE USER ARCH
  IDENTIFIED BY <password>
  DEFAULT TABLESPACE SYSTEM
  TEMPORARY TABLESPACE TEMP
  PROFILE DEFAULT
  ACCOUNT UNLOCK;
  -- 2 Roles for ARCH 
  GRANT CONNECT TO ARCH;
  GRANT DBA TO ARCH;
  ALTER USER ARCH DEFAULT ROLE NONE;
  -- 206 System Privileges for ARCH 
  GRANT ADMINISTER ANY SQL TUNING SET TO ARCH;
  GRANT ADMINISTER DATABASE TRIGGER TO ARCH;
  BEGIN
SYS.DBMS_RESOURCE_MANAGER_PRIVS.GRANT_SYSTEM_PRIVILEGE
  (GRANTEE_NAME   => 'ARCH', 
   PRIVILEGE_NAME => 'ADMINISTER_RESOURCE_MANAGER',
   ADMIN_OPTION   => FALSE);
END;
/
  GRANT ADMINISTER SQL MANAGEMENT OBJECT TO ARCH;
  GRANT ADMINISTER SQL TUNING SET TO ARCH;
  GRANT ADVISOR TO ARCH;
  GRANT ALTER ANY ASSEMBLY TO ARCH;
  GRANT ALTER ANY CLUSTER TO ARCH;
  GRANT ALTER ANY CUBE TO ARCH;
  GRANT ALTER ANY CUBE DIMENSION TO ARCH;
  GRANT ALTER ANY DIMENSION TO ARCH;
  GRANT ALTER ANY EDITION TO ARCH;
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.ALTER_ANY_EVALUATION_CONTEXT,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  GRANT ALTER ANY INDEX TO ARCH;
  GRANT ALTER ANY INDEXTYPE TO ARCH;
  GRANT ALTER ANY LIBRARY TO ARCH;
  GRANT ALTER ANY MATERIALIZED VIEW TO ARCH;
  GRANT ALTER ANY MINING MODEL TO ARCH;
  GRANT ALTER ANY OPERATOR TO ARCH;
  GRANT ALTER ANY OUTLINE TO ARCH;
  GRANT ALTER ANY PROCEDURE TO ARCH;
  GRANT ALTER ANY ROLE TO ARCH;
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.ALTER_ANY_RULE,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.ALTER_ANY_RULE_SET,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  GRANT ALTER ANY SEQUENCE TO ARCH;
  GRANT ALTER ANY SQL PROFILE TO ARCH;
  GRANT ALTER ANY TABLE TO ARCH;
  GRANT ALTER ANY TRIGGER TO ARCH;
  GRANT ALTER ANY TYPE TO ARCH;
  GRANT ALTER DATABASE TO ARCH;
  GRANT ALTER DATABASE LINK TO ARCH;
  GRANT ALTER PROFILE TO ARCH;
  GRANT ALTER PUBLIC DATABASE LINK TO ARCH;
  GRANT ALTER RESOURCE COST TO ARCH;
  GRANT ALTER ROLLBACK SEGMENT TO ARCH;
  GRANT ALTER SESSION TO ARCH;
  GRANT ALTER SYSTEM TO ARCH;
  GRANT ALTER TABLESPACE TO ARCH;
  GRANT ALTER USER TO ARCH;
  GRANT ANALYZE ANY TO ARCH;
  GRANT ANALYZE ANY DICTIONARY TO ARCH;
  GRANT AUDIT ANY TO ARCH;
  GRANT AUDIT SYSTEM TO ARCH;
  GRANT BACKUP ANY TABLE TO ARCH;
  GRANT BECOME USER TO ARCH;
  GRANT CHANGE NOTIFICATION TO ARCH;
  GRANT COMMENT ANY MINING MODEL TO ARCH;
  GRANT COMMENT ANY TABLE TO ARCH;
  GRANT CREATE ANY ASSEMBLY TO ARCH;
  GRANT CREATE ANY CLUSTER TO ARCH;
  GRANT CREATE ANY CONTEXT TO ARCH;
  GRANT CREATE ANY CUBE TO ARCH;
  GRANT CREATE ANY CUBE BUILD PROCESS TO ARCH;
  GRANT CREATE ANY CUBE DIMENSION TO ARCH;
  GRANT CREATE ANY DIMENSION TO ARCH;
  GRANT CREATE ANY DIRECTORY TO ARCH;
  GRANT CREATE ANY EDITION TO ARCH;
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.CREATE_ANY_EVALUATION_CONTEXT,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  GRANT CREATE ANY INDEX TO ARCH;
  GRANT CREATE ANY INDEXTYPE TO ARCH;
  GRANT CREATE ANY JOB TO ARCH;
  GRANT CREATE ANY LIBRARY TO ARCH;
  GRANT CREATE ANY MATERIALIZED VIEW TO ARCH;
  GRANT CREATE ANY MEASURE FOLDER TO ARCH;
  GRANT CREATE ANY MINING MODEL TO ARCH;
  GRANT CREATE ANY OPERATOR TO ARCH;
  GRANT CREATE ANY OUTLINE TO ARCH;
  GRANT CREATE ANY PROCEDURE TO ARCH;
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.CREATE_ANY_RULE,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.CREATE_ANY_RULE_SET,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  GRANT CREATE ANY SEQUENCE TO ARCH;
  GRANT CREATE ANY SQL PROFILE TO ARCH;
  GRANT CREATE ANY SYNONYM TO ARCH;
  GRANT CREATE ANY TABLE TO ARCH;
  GRANT CREATE ANY TRIGGER TO ARCH;
  GRANT CREATE ANY TYPE TO ARCH;
  GRANT CREATE ANY VIEW TO ARCH;
  GRANT CREATE ASSEMBLY TO ARCH;
  GRANT CREATE CLUSTER TO ARCH;
  GRANT CREATE CUBE TO ARCH;
  GRANT CREATE CUBE BUILD PROCESS TO ARCH;
  GRANT CREATE CUBE DIMENSION TO ARCH;
  GRANT CREATE DATABASE LINK TO ARCH;
  GRANT CREATE DIMENSION TO ARCH;
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT_OBJ,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  GRANT CREATE EXTERNAL JOB TO ARCH;
  GRANT CREATE INDEXTYPE TO ARCH;
  GRANT CREATE JOB TO ARCH;
  GRANT CREATE LIBRARY TO ARCH;
  GRANT CREATE MATERIALIZED VIEW TO ARCH;
  GRANT CREATE MEASURE FOLDER TO ARCH;
  GRANT CREATE MINING MODEL TO ARCH;
  GRANT CREATE OPERATOR TO ARCH;
  GRANT CREATE PROCEDURE TO ARCH;
  GRANT CREATE PROFILE TO ARCH;
  GRANT CREATE PUBLIC DATABASE LINK TO ARCH;
  GRANT CREATE PUBLIC SYNONYM TO ARCH;
  GRANT CREATE ROLE TO ARCH;
  GRANT CREATE ROLLBACK SEGMENT TO ARCH;
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.CREATE_RULE_OBJ,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.CREATE_RULE_SET_OBJ,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  GRANT CREATE SEQUENCE TO ARCH;
  GRANT CREATE SESSION TO ARCH;
  GRANT CREATE SYNONYM TO ARCH;
  GRANT CREATE TABLE TO ARCH;
  GRANT CREATE TABLESPACE TO ARCH;
  GRANT CREATE TRIGGER TO ARCH;
  GRANT CREATE TYPE TO ARCH;
  GRANT CREATE USER TO ARCH;
  GRANT CREATE VIEW TO ARCH;
  GRANT DEBUG ANY PROCEDURE TO ARCH;
  GRANT DEBUG CONNECT SESSION TO ARCH;
  GRANT DELETE ANY CUBE DIMENSION TO ARCH;
  GRANT DELETE ANY MEASURE FOLDER TO ARCH;
  GRANT DELETE ANY TABLE TO ARCH;
  BEGIN
SYS.DBMS_AQADM.GRANT_SYSTEM_PRIVILEGE (
  PRIVILEGE    => 'DEQUEUE_ANY',
  GRANTEE      => 'ARCH',
  ADMIN_OPTION => FALSE);
END;
/
  GRANT DROP ANY ASSEMBLY TO ARCH;
  GRANT DROP ANY CLUSTER TO ARCH;
  GRANT DROP ANY CONTEXT TO ARCH;
  GRANT DROP ANY CUBE TO ARCH;
  GRANT DROP ANY CUBE BUILD PROCESS TO ARCH;
  GRANT DROP ANY CUBE DIMENSION TO ARCH;
  GRANT DROP ANY DIMENSION TO ARCH;
  GRANT DROP ANY DIRECTORY TO ARCH;
  GRANT DROP ANY EDITION TO ARCH;
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.DROP_ANY_EVALUATION_CONTEXT,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  GRANT DROP ANY INDEX TO ARCH;
  GRANT DROP ANY INDEXTYPE TO ARCH;
  GRANT DROP ANY LIBRARY TO ARCH;
  GRANT DROP ANY MATERIALIZED VIEW TO ARCH;
  GRANT DROP ANY MEASURE FOLDER TO ARCH;
  GRANT DROP ANY MINING MODEL TO ARCH;
  GRANT DROP ANY OPERATOR TO ARCH;
  GRANT DROP ANY OUTLINE TO ARCH;
  GRANT DROP ANY PROCEDURE TO ARCH;
  GRANT DROP ANY ROLE TO ARCH;
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.DROP_ANY_RULE,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.DROP_ANY_RULE_SET,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  GRANT DROP ANY SEQUENCE TO ARCH;
  GRANT DROP ANY SQL PROFILE TO ARCH;
  GRANT DROP ANY SYNONYM TO ARCH;
  GRANT DROP ANY TABLE TO ARCH;
  GRANT DROP ANY TRIGGER TO ARCH;
  GRANT DROP ANY TYPE TO ARCH;
  GRANT DROP ANY VIEW TO ARCH;
  GRANT DROP PROFILE TO ARCH;
  GRANT DROP PUBLIC DATABASE LINK TO ARCH;
  GRANT DROP PUBLIC SYNONYM TO ARCH;
  GRANT DROP ROLLBACK SEGMENT TO ARCH;
  GRANT DROP TABLESPACE TO ARCH;
  GRANT DROP USER TO ARCH;
  BEGIN
SYS.DBMS_AQADM.GRANT_SYSTEM_PRIVILEGE (
  PRIVILEGE    => 'ENQUEUE_ANY',
  GRANTEE      => 'ARCH',
  ADMIN_OPTION => FALSE);
END;
/
  GRANT EXECUTE ANY ASSEMBLY TO ARCH;
  GRANT EXECUTE ANY CLASS TO ARCH;
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.EXECUTE_ANY_EVALUATION_CONTEXT,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  GRANT EXECUTE ANY INDEXTYPE TO ARCH;
  GRANT EXECUTE ANY LIBRARY TO ARCH;
  GRANT EXECUTE ANY OPERATOR TO ARCH;
  GRANT EXECUTE ANY PROCEDURE TO ARCH;
  GRANT EXECUTE ANY PROGRAM TO ARCH;
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.EXECUTE_ANY_RULE,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  BEGIN
SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(
  PRIVILEGE    => SYS.DBMS_RULE_ADM.EXECUTE_ANY_RULE_SET,
  GRANTEE      => 'ARCH',
  GRANT_OPTION => FALSE);
END;
/
  GRANT EXECUTE ANY TYPE TO ARCH;
  GRANT EXECUTE ASSEMBLY TO ARCH;
  GRANT EXEMPT ACCESS POLICY TO ARCH;
  GRANT EXEMPT IDENTITY POLICY TO ARCH;
  GRANT EXPORT FULL DATABASE TO ARCH;
  GRANT FLASHBACK ANY TABLE TO ARCH;
  GRANT FLASHBACK ARCHIVE ADMINISTER TO ARCH;
  GRANT FORCE ANY TRANSACTION TO ARCH;
  GRANT FORCE TRANSACTION TO ARCH;
  GRANT GLOBAL QUERY REWRITE TO ARCH;
  GRANT GRANT ANY OBJECT PRIVILEGE TO ARCH;
  GRANT GRANT ANY PRIVILEGE TO ARCH;
  GRANT GRANT ANY ROLE TO ARCH;
  GRANT IMPORT FULL DATABASE TO ARCH;
  GRANT INSERT ANY CUBE DIMENSION TO ARCH;
  GRANT INSERT ANY MEASURE FOLDER TO ARCH;
  GRANT INSERT ANY TABLE TO ARCH;
  GRANT LOCK ANY TABLE TO ARCH;
  GRANT MANAGE ANY FILE GROUP TO ARCH;
  BEGIN
SYS.DBMS_AQADM.GRANT_SYSTEM_PRIVILEGE (
  PRIVILEGE    => 'MANAGE_ANY',
  GRANTEE      => 'ARCH',
  ADMIN_OPTION => FALSE);
END;
/
  GRANT MANAGE FILE GROUP TO ARCH;
  GRANT MANAGE SCHEDULER TO ARCH;
  GRANT MANAGE TABLESPACE TO ARCH;
  GRANT MERGE ANY VIEW TO ARCH;
  GRANT ON COMMIT REFRESH TO ARCH;
  GRANT QUERY REWRITE TO ARCH;
  GRANT READ ANY FILE GROUP TO ARCH;
  GRANT RESTRICTED SESSION TO ARCH;
  GRANT RESUMABLE TO ARCH;
  GRANT SELECT ANY CUBE TO ARCH;
  GRANT SELECT ANY CUBE DIMENSION TO ARCH;
  GRANT SELECT ANY DICTIONARY TO ARCH;
  GRANT SELECT ANY MINING MODEL TO ARCH;
  GRANT SELECT ANY SEQUENCE TO ARCH;
  GRANT SELECT ANY TABLE TO ARCH;
  GRANT SELECT ANY TRANSACTION TO ARCH;
  GRANT UNDER ANY TABLE TO ARCH;
  GRANT UNDER ANY TYPE TO ARCH;
  GRANT UNDER ANY VIEW TO ARCH;
  GRANT UNLIMITED TABLESPACE TO ARCH;
  GRANT UPDATE ANY CUBE TO ARCH;
  GRANT UPDATE ANY CUBE BUILD PROCESS TO ARCH;
  GRANT UPDATE ANY CUBE DIMENSION TO ARCH;
  GRANT UPDATE ANY TABLE TO ARCH;


--
-- ORACLECLRDIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
ORACLECLRDIR AS 
'C:\oraclexe\app\oracle\product\11.2.0\server\bin\clr';


--
-- DATA_PUMP_DIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
DATA_PUMP_DIR AS 
'C:\oraclexe\app\oracle\admin\xe\dpdump\';


--
-- XMLDIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
XMLDIR AS 
'C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\xml';


--
-- ORACLE_OCM_CONFIG_DIR  (Directory) 
--
CREATE OR REPLACE DIRECTORY 
ORACLE_OCM_CONFIG_DIR AS 
'C:/ADE/jaikrish_xe/oracle\ccr\state';


--
-- ADDRESS_DICTIONARY_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.ADDRESS_DICTIONARY_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- ATTRIBUTES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.ATTRIBUTES_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- ATTRIBUTES_VALUES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.ATTRIBUTES_VALUES_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- CLIENTS_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.CLIENTS_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- COPIES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.COPIES_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- COPY_TYPES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.COPY_TYPES_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- COPY_TYPE_ATTRIBUTES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.COPY_TYPE_ATTRIBUTES_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- DOCUMENTS_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.DOCUMENTS_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- DOCUMENT_HISTORY_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.DOCUMENT_HISTORY_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- DOCUMENT_TYPES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.DOCUMENT_TYPES_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- DOCUMENT_TYPE_ATTRIBUTES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.DOCUMENT_TYPE_ATTRIBUTES_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- MOVEMENT_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.MOVEMENT_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- REFERENCES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.REFERENCES_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- REFERENCE_TYPES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.REFERENCE_TYPES_SEQ
  START WITH 21
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- ROLES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.ROLES_SEQ
  START WITH 21
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- ROLE_CLIENT_ACCESS_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.ROLE_CLIENT_ACCESS_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- ROLE_DOCUMENT_ACCESS_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.ROLE_DOCUMENT_ACCESS_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- ROLE_DOCUMENT_TYPE_ACCESS_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.ROLE_DOCUMENT_TYPE_ACCESS_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- USERS_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.USERS_SEQ
  START WITH 41
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- USER_CLIENT_ACCESS_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.USER_CLIENT_ACCESS_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- USER_DOCUMENT_ACCESS_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.USER_DOCUMENT_ACCESS_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- USER_DOCUMENT_TYPE_ACCESS_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.USER_DOCUMENT_TYPE_ACCESS_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- USER_ROLES_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH.USER_ROLES_SEQ
  START WITH 21
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- USERS  (Table) 
--
CREATE TABLE ARCH.USERS
(
  ID                      NUMBER(9)             NOT NULL,
  NAME                    VARCHAR2(100 BYTE)    NOT NULL,
  FULL_NAME               NVARCHAR2(500)        NOT NULL,
  BLOCK                   NUMBER(1)             DEFAULT 0                     NOT NULL,
  AUD_CREATE_USER_NAME    VARCHAR2(250 BYTE)    NOT NULL,
  AUD_MODIFY_USER_NAME    VARCHAR2(250 BYTE)    NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- REFERENCE_TYPES  (Table) 
--
CREATE TABLE ARCH.REFERENCE_TYPES
(
  ID                      NUMBER(9)             NOT NULL,
  NAME                    NVARCHAR2(500)        NOT NULL,
  DESCRIPTION             NVARCHAR2(2000),
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- REFERENCE_TYPES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.REFERENCE_TYPES_PK ON ARCH.REFERENCE_TYPES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- USERS_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.USERS_PK ON ARCH.USERS
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- USERS_UK1  (Index) 
--
CREATE UNIQUE INDEX ARCH.USERS_UK1 ON ARCH.USERS
(NAME)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- DML_REFERENCE_TYPES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_REFERENCE_TYPES IS

  PROCEDURE INS_REFERENCE_TYPES_WI
    (
     in_ID                     IN ARCH.REFERENCE_TYPES.ID%TYPE
    ,in_NAME                   IN ARCH.REFERENCE_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCE_TYPES.DESCRIPTION%TYPE
    );

    PROCEDURE INS_REFERENCE_TYPES
    (
     in_NAME                   IN ARCH.REFERENCE_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCE_TYPES.DESCRIPTION%TYPE
    );

  PROCEDURE UPD_REFERENCE_TYPES
    (
     in_ID                     IN ARCH.REFERENCE_TYPES.ID%TYPE
    ,in_NAME                   IN ARCH.REFERENCE_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCE_TYPES.DESCRIPTION%TYPE
    );

  PROCEDURE DEL_REFERENCE_TYPES
    (
     in_ID                     IN ARCH.REFERENCE_TYPES.ID%TYPE
    );

END DML_REFERENCE_TYPES;
/

--
-- DML_USERS  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_USERS IS

  PROCEDURE INS_USERS
    (
     in_NAME                   IN ARCH.USERS.NAME%TYPE
    ,in_FULL_NAME              IN ARCH.USERS.FULL_NAME%TYPE
    ,in_BLOCK                  IN ARCH.USERS.BLOCK%TYPE
    );

   PROCEDURE INS_USERS_WI
    (
     in_ID                     IN ARCH.USERS.ID%TYPE
    ,in_NAME                   IN ARCH.USERS.NAME%TYPE
    ,in_FULL_NAME              IN ARCH.USERS.FULL_NAME%TYPE
    ,in_BLOCK                  IN ARCH.USERS.BLOCK%TYPE
    );

  PROCEDURE UPD_USERS
    (
     in_ID                     IN ARCH.USERS.ID%TYPE
    ,in_PASSWORD               IN ARCH.USERS.NAME%TYPE
    ,in_FULL_NAME              IN ARCH.USERS.FULL_NAME%TYPE
    ,in_BLOCK                  IN ARCH.USERS.BLOCK%TYPE
    );

  PROCEDURE DEL_USERS
    (
     in_ID                     IN ARCH.USERS.ID%TYPE
    );

END DML_USERS;
/

--
-- DML_REFERENCE_TYPES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_REFERENCE_TYPES IS

  PROCEDURE INS_REFERENCE_TYPES_WI
    (
    in_ID                     IN ARCH.REFERENCE_TYPES.ID%TYPE
    ,in_NAME                   IN ARCH.REFERENCE_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCE_TYPES.DESCRIPTION%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.REFERENCE_TYPES
      (
      ID
      ,NAME
      ,DESCRIPTION
      )
    VALUES
      (
       in_ID
      ,in_NAME
      ,in_DESCRIPTION
      );
  END INS_REFERENCE_TYPES_WI;

    PROCEDURE INS_REFERENCE_TYPES
    (
     in_NAME                   IN ARCH.REFERENCE_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCE_TYPES.DESCRIPTION%TYPE
    ) IS
  BEGIN
    INS_REFERENCE_TYPES_WI(
       REFERENCE_TYPES_SEQ.NEXTVAL
      ,in_NAME
      ,in_DESCRIPTION
      );
  END INS_REFERENCE_TYPES;

  PROCEDURE UPD_REFERENCE_TYPES
    (
     in_ID                     IN ARCH.REFERENCE_TYPES.ID%TYPE
    ,in_NAME                   IN ARCH.REFERENCE_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCE_TYPES.DESCRIPTION%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.REFERENCE_TYPES
    SET 
        NAME                     = in_NAME
       ,DESCRIPTION              = in_DESCRIPTION
    WHERE
        ID                       = in_ID;
  END UPD_REFERENCE_TYPES;

  PROCEDURE DEL_REFERENCE_TYPES
    (
     in_ID                     IN ARCH.REFERENCE_TYPES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.REFERENCE_TYPES
    WHERE
        ID                       = in_ID;
  END DEL_REFERENCE_TYPES;

END DML_REFERENCE_TYPES;
/

--
-- DML_USERS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_USERS IS

 PROCEDURE INS_USERS_WI
    (
     in_ID                     IN ARCH.USERS.ID%TYPE
    ,in_NAME                   IN ARCH.USERS.NAME%TYPE
    ,in_FULL_NAME              IN ARCH.USERS.FULL_NAME%TYPE
    ,in_BLOCK                  IN ARCH.USERS.BLOCK%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.USERS
      (
       ID
      ,NAME
      ,FULL_NAME
      ,BLOCK
      )
    VALUES
      (
       in_ID
      ,in_NAME
      ,in_FULL_NAME
      ,in_BLOCK
      );
      
      EXECUTE IMMEDIATE 'CREATE USER ' || in_NAME || ' IDENTIFIED BY '|| in_NAME||'';
      EXECUTE IMMEDIATE 'GRANT CONNECT TO ' || in_NAME || ''; 
      EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO ' || in_NAME || ''; 
    
  END INS_USERS_WI;

  PROCEDURE INS_USERS
    (
     in_NAME                   IN ARCH.USERS.NAME%TYPE
    ,in_FULL_NAME              IN ARCH.USERS.FULL_NAME%TYPE
    ,in_BLOCK                  IN ARCH.USERS.BLOCK%TYPE
    ) IS
  BEGIN
    INS_USERS_WI(
       USERS_SEQ.NEXTVAL
      ,in_NAME
      ,in_FULL_NAME
      ,in_BLOCK
      );
    
  END INS_USERS;

  

  PROCEDURE UPD_USERS
    (
     in_ID                     IN ARCH.USERS.ID%TYPE
    ,in_PASSWORD               IN ARCH.USERS.NAME%TYPE
    ,in_FULL_NAME              IN ARCH.USERS.FULL_NAME%TYPE
    ,in_BLOCK                  IN ARCH.USERS.BLOCK%TYPE
    ) IS
    in_NAME                   varchar2(100); 
  BEGIN
    
    select name into in_NAME from ARCH.USERS where id=in_ID;
    
    UPDATE ARCH.USERS
    SET 
        FULL_NAME                = in_FULL_NAME
       ,BLOCK                    = in_BLOCK
    WHERE
        ID                       = in_ID;
            
    EXECUTE IMMEDIATE 'ALTER USER ' || in_NAME || ' IDENTIFIED BY '|| in_PASSWORD||'';
    
  END UPD_USERS;

  PROCEDURE DEL_USERS
    (
     in_ID                     IN ARCH.USERS.ID%TYPE
    ) IS
    in_NAME                   varchar2(100); 
  BEGIN    
    select name into in_NAME from ARCH.USERS where id=in_ID;
    DELETE FROM ARCH.USERS
    WHERE
        ID                       = in_ID;
    EXECUTE IMMEDIATE 'DROP USER ' || in_NAME;    
  END DEL_USERS;

END DML_USERS;
/

--
-- GET_AUDIT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE ARCH.GET_AUDIT
(
   AUD_USER_ID out NUMBER,
   AUD_TIME out date,
   AUD_OS_USER out nvarchar2,
   AUD_HOST out nvarchar2,
   AUD_APPLICATION out nvarchar2
)
IS
BEGIN
    AUD_TIME:=SYSDATE;
    SELECT ID INTO AUD_USER_ID FROM USERS where NAME=USER;
    SELECT nvl(sys_context('USERENV', 'HOST'),'unknown') into AUD_HOST FROM DUAL;
    SELECT nvl(sys_context('USERENV', 'MODULE'),'unknown') into AUD_APPLICATION FROM DUAL;
    SELECT nvl(sys_context('USERENV', 'OS_USER'),'unknown') into AUD_OS_USER FROM DUAL;
END;
/

--
-- REFERENCE_TYPES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.REFERENCE_TYPES_TRG 
BEFORE INSERT ON ARCH.REFERENCE_TYPES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT REFERENCE_TYPES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- USERS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.USERS_TRG 
BEFORE INSERT ON ARCH.USERS 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT USERS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- USERS_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.USERS_AUD
BEFORE INSERT OR UPDATE
ON ARCH.USERS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
FOLLOWS USERS_TRG
DECLARE
   AUD_USER_NAME nvarchar2(250);
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    AUD_TIME:=SYSDATE;
    AUD_USER_NAME :=nvl(USER,'unknown');
    SELECT nvl(sys_context('USERENV', 'HOST'),'unknown') into AUD_HOST FROM DUAL;
    SELECT nvl(sys_context('USERENV', 'MODULE'),'unknown') into AUD_APPLICATION FROM DUAL;
    SELECT nvl(sys_context('USERENV', 'OS_USER'),'unknown') into AUD_OS_USER FROM DUAL;

    if inserting then
        :NEW.AUD_CREATE_USER_NAME := AUD_USER_NAME;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_NAME := AUD_USER_NAME;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END USERS_AUD;
/


--
-- REFERENCE_TYPES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.REFERENCE_TYPES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.REFERENCE_TYPES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END REFERENCE_TYPES_AUD;
/


--
-- CLIENTS  (Table) 
--
CREATE TABLE ARCH.CLIENTS
(
  ID                      NUMBER(9)             NOT NULL,
  FULL_NAME               NVARCHAR2(500),
  FIRST_NAME              NVARCHAR2(100),
  SUR_NAME                NVARCHAR2(100),
  LAST_NAME               NVARCHAR2(100),
  CLIENT_TYPE             INTEGER               NOT NULL,
  IDENTIFICATION_NUMBER   NVARCHAR2(20)         NOT NULL,
  ADDRESS                 NVARCHAR2(500),
  CONTACTS                NVARCHAR2(500),
  FULL_ACCESS             NUMBER(1)             DEFAULT 1                     NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- ADDRESS_DICTIONARY  (Table) 
--
CREATE TABLE ARCH.ADDRESS_DICTIONARY
(
  ID                      NUMBER(9)             NOT NULL,
  PARENT_ID               NUMBER(9),
  NAME                    NVARCHAR2(500)        NOT NULL,
  DESCRIPTION             NVARCHAR2(2000),
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- DOCUMENT_TYPES  (Table) 
--
CREATE TABLE ARCH.DOCUMENT_TYPES
(
  ID                      NUMBER(9)             NOT NULL,
  NAME                    NVARCHAR2(500)        NOT NULL,
  PARENT_ID               NUMBER(9),
  DESCRIPTION             NVARCHAR2(2000),
  FULL_ACCESS             NUMBER(1)             DEFAULT 1                     NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- ATTRIBUTES  (Table) 
--
CREATE TABLE ARCH.ATTRIBUTES
(
  ID                      NUMBER(9)             NOT NULL,
  NAME                    NVARCHAR2(500)        NOT NULL,
  DESCRIPTION             NVARCHAR2(2000),
  VALUETYPE               NVARCHAR2(100)        NOT NULL,
  REFERENCE_TYPE_ID       NUMBER(9),
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- DOCUMENT_TYPE_ATTRIBUTES  (Table) 
--
CREATE TABLE ARCH.DOCUMENT_TYPE_ATTRIBUTES
(
  ID                      NUMBER(9)             NOT NULL,
  DOCUMENT_TYPE_ID        NUMBER(9)             NOT NULL,
  ATTRIBUTE_ID            NUMBER(9)             NOT NULL,
  MANDATORY               NUMBER(1)             DEFAULT 0                     NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- ROLES  (Table) 
--
CREATE TABLE ARCH.ROLES
(
  ID                      NUMBER(9)             NOT NULL,
  NAME                    NVARCHAR2(500)        NOT NULL,
  DESCRIPTION             NVARCHAR2(2000),
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- REFERENCES  (Table) 
--
CREATE TABLE ARCH.REFERENCES
(
  ID                      NUMBER(9)             NOT NULL,
  NAME                    NVARCHAR2(500)        NOT NULL,
  DESCRIPTION             NVARCHAR2(2000),
  REFENCE_TYPE_ID         NUMBER(9)             NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- DOCUMENTS  (Table) 
--
CREATE TABLE ARCH.DOCUMENTS
(
  ID                      NUMBER(9)             NOT NULL,
  DOCUMENT_TYPE_ID        NUMBER(9)             NOT NULL,
  CLIENT_ID               NUMBER(9)             NOT NULL,
  DOCUMENT_NUMBER         NVARCHAR2(500)        NOT NULL,
  DOCUMENT_DATE           DATE                  NOT NULL,
  ADDRESS_ID              NUMBER(9),
  FULL_ACCESS             NUMBER(1)             DEFAULT 1                     NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL,
  IS_DIRECTORY            NUMBER(1)             DEFAULT 0                     NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- ROLE_CLIENT_ACCESS  (Table) 
--
CREATE TABLE ARCH.ROLE_CLIENT_ACCESS
(
  ID                      NUMBER(9)             NOT NULL,
  ROLE_ID                 NUMBER(9)             NOT NULL,
  CLIENT_ID               NUMBER(9)             NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- USER_CLIENT_ACCESS  (Table) 
--
CREATE TABLE ARCH.USER_CLIENT_ACCESS
(
  ID                      NUMBER(9)             NOT NULL,
  USER_ID                 NUMBER(9)             NOT NULL,
  CLIENT_ID               NUMBER(9)             NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- ADDRESS_DICTIONARY_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.ADDRESS_DICTIONARY_PK ON ARCH.ADDRESS_DICTIONARY
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- ATTRIBUTES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.ATTRIBUTES_PK ON ARCH.ATTRIBUTES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- CLIENTS_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.CLIENTS_PK ON ARCH.CLIENTS
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- DOCUMENT_TYPE_ATTRIBUTES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.DOCUMENT_TYPE_ATTRIBUTES_PK ON ARCH.DOCUMENT_TYPE_ATTRIBUTES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- DOCUMENT_TYPES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.DOCUMENT_TYPES_PK ON ARCH.DOCUMENT_TYPES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- DOCUMENTS_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.DOCUMENTS_PK ON ARCH.DOCUMENTS
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- REFERENCES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.REFERENCES_PK ON ARCH.REFERENCES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- ROLE_CLIENT_ACCESS_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.ROLE_CLIENT_ACCESS_PK ON ARCH.ROLE_CLIENT_ACCESS
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- ROLES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.ROLES_PK ON ARCH.ROLES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- USER_CLIENT_ACCESS_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.USER_CLIENT_ACCESS_PK ON ARCH.USER_CLIENT_ACCESS
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- DML_ADDRESS_DICTIONARY  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_ADDRESS_DICTIONARY IS

  PROCEDURE INS_ADDRESS_DICTIONARY_WI
    (
    in_ID                     IN ARCH.ADDRESS_DICTIONARY.ID%TYPE,
     in_PARENT_ID              IN ARCH.ADDRESS_DICTIONARY.PARENT_ID%TYPE
    ,in_NAME                   IN ARCH.ADDRESS_DICTIONARY.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ADDRESS_DICTIONARY.DESCRIPTION%TYPE
    );
    
     PROCEDURE INS_ADDRESS_DICTIONARY
    (
     in_PARENT_ID              IN ARCH.ADDRESS_DICTIONARY.PARENT_ID%TYPE
    ,in_NAME                   IN ARCH.ADDRESS_DICTIONARY.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ADDRESS_DICTIONARY.DESCRIPTION%TYPE
    );


  PROCEDURE UPD_ADDRESS_DICTIONARY
    (
     in_ID                     IN ARCH.ADDRESS_DICTIONARY.ID%TYPE
    ,in_PARENT_ID              IN ARCH.ADDRESS_DICTIONARY.PARENT_ID%TYPE
    ,in_NAME                   IN ARCH.ADDRESS_DICTIONARY.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ADDRESS_DICTIONARY.DESCRIPTION%TYPE
    );

  PROCEDURE DEL_ADDRESS_DICTIONARY
    (
     in_ID                     IN ARCH.ADDRESS_DICTIONARY.ID%TYPE
    );

END DML_ADDRESS_DICTIONARY;
/

--
-- DML_ATTRIBUTES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_ATTRIBUTES IS

  PROCEDURE INS_ATTRIBUTES_WI
    (
     in_ID                     IN ARCH.ATTRIBUTES.ID%TYPE
     ,in_NAME                   IN ARCH.ATTRIBUTES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ATTRIBUTES.DESCRIPTION%TYPE
    ,in_VALUETYPE              IN ARCH.ATTRIBUTES.VALUETYPE%TYPE
    ,in_REFERENCE_ID           IN ARCH.ATTRIBUTES.REFERENCE_ID%TYPE
    );
    
  PROCEDURE INS_ATTRIBUTES
    (
     in_NAME                   IN ARCH.ATTRIBUTES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ATTRIBUTES.DESCRIPTION%TYPE
    ,in_VALUETYPE              IN ARCH.ATTRIBUTES.VALUETYPE%TYPE
    ,in_REFERENCE_ID           IN ARCH.ATTRIBUTES.REFERENCE_ID%TYPE
    );

  PROCEDURE UPD_ATTRIBUTES
    (
     in_ID                     IN ARCH.ATTRIBUTES.ID%TYPE
    ,in_NAME                   IN ARCH.ATTRIBUTES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ATTRIBUTES.DESCRIPTION%TYPE
    ,in_VALUETYPE              IN ARCH.ATTRIBUTES.VALUETYPE%TYPE
    ,in_REFERENCE_ID           IN ARCH.ATTRIBUTES.REFERENCE_ID%TYPE
    );

  PROCEDURE DEL_ATTRIBUTES
    (
     in_ID                     IN ARCH.ATTRIBUTES.ID%TYPE
    );

END DML_ATTRIBUTES;
/

--
-- DML_CLIENTS  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_CLIENTS IS

  PROCEDURE INS_CLIENTS_WI
    (
     in_ID                     IN ARCH.CLIENTS.ID%TYPE,
     in_FULL_NAME              IN ARCH.CLIENTS.FULL_NAME%TYPE
    ,in_FIRST_NAME             IN ARCH.CLIENTS.FIRST_NAME%TYPE
    ,in_SUR_NAME               IN ARCH.CLIENTS.SUR_NAME%TYPE
    ,in_LAST_NAME              IN ARCH.CLIENTS.LAST_NAME%TYPE
    ,in_CLIENT_TYPE            IN ARCH.CLIENTS.CLIENT_TYPE%TYPE
    ,in_IDENTIFICATION_NUMBER  IN ARCH.CLIENTS.IDENTIFICATION_NUMBER%TYPE
    ,in_ADDRESS                IN ARCH.CLIENTS.ADDRESS%TYPE
    ,in_CONTACTS               IN ARCH.CLIENTS.CONTACTS%TYPE
    ,in_FULL_ACCESS            IN ARCH.CLIENTS.FULL_ACCESS%TYPE
    );

  PROCEDURE INS_CLIENTS
    (
     in_FULL_NAME              IN ARCH.CLIENTS.FULL_NAME%TYPE
    ,in_FIRST_NAME             IN ARCH.CLIENTS.FIRST_NAME%TYPE
    ,in_SUR_NAME               IN ARCH.CLIENTS.SUR_NAME%TYPE
    ,in_LAST_NAME              IN ARCH.CLIENTS.LAST_NAME%TYPE
    ,in_CLIENT_TYPE            IN ARCH.CLIENTS.CLIENT_TYPE%TYPE
    ,in_IDENTIFICATION_NUMBER  IN ARCH.CLIENTS.IDENTIFICATION_NUMBER%TYPE
    ,in_ADDRESS                IN ARCH.CLIENTS.ADDRESS%TYPE
    ,in_CONTACTS               IN ARCH.CLIENTS.CONTACTS%TYPE
    ,in_FULL_ACCESS            IN ARCH.CLIENTS.FULL_ACCESS%TYPE
    );
  
  PROCEDURE UPD_CLIENTS
    (
     in_ID                     IN ARCH.CLIENTS.ID%TYPE
    ,in_FULL_NAME              IN ARCH.CLIENTS.FULL_NAME%TYPE
    ,in_FIRST_NAME             IN ARCH.CLIENTS.FIRST_NAME%TYPE
    ,in_SUR_NAME               IN ARCH.CLIENTS.SUR_NAME%TYPE
    ,in_LAST_NAME              IN ARCH.CLIENTS.LAST_NAME%TYPE
    ,in_CLIENT_TYPE            IN ARCH.CLIENTS.CLIENT_TYPE%TYPE
    ,in_IDENTIFICATION_NUMBER  IN ARCH.CLIENTS.IDENTIFICATION_NUMBER%TYPE
    ,in_ADDRESS                IN ARCH.CLIENTS.ADDRESS%TYPE
    ,in_CONTACTS               IN ARCH.CLIENTS.CONTACTS%TYPE
    ,in_FULL_ACCESS            IN ARCH.CLIENTS.FULL_ACCESS%TYPE
    );

  PROCEDURE DEL_CLIENTS
    (
     in_ID                     IN ARCH.CLIENTS.ID%TYPE
    );

END DML_CLIENTS;
/

--
-- DML_DOCUMENT_TYPE_ATTRIBUTES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_DOCUMENT_TYPE_ATTRIBUTES IS

  PROCEDURE INS_DOC_TYPE_ATTRIBUTES_WI
    (
     in_ID                     IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.DOCUMENT_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.MANDATORY%TYPE
    );

  PROCEDURE INS_DOC_TYPE_ATTRIBUTES
    (
     in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.DOCUMENT_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.MANDATORY%TYPE
    );

  PROCEDURE UPD_DOC_TYPE_ATTRIBUTES
    (
     in_ID                     IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.DOCUMENT_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.MANDATORY%TYPE
    );

  PROCEDURE DEL_DOC_TYPE_ATTRIBUTES
    (
     in_ID                     IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ID%TYPE
    );

END DML_DOCUMENT_TYPE_ATTRIBUTES;
/

--
-- DML_DOCUMENT_TYPES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_DOCUMENT_TYPES IS

  PROCEDURE INS_DOCUMENT_TYPES_WI
    (
     in_ID                     IN ARCH.DOCUMENT_TYPES.ID%TYPE
    ,in_NAME                   IN ARCH.DOCUMENT_TYPES.NAME%TYPE
    ,in_PARENT_ID              IN ARCH.DOCUMENT_TYPES.PARENT_ID%TYPE
    ,in_DESCRIPTION            IN ARCH.DOCUMENT_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENT_TYPES.FULL_ACCESS%TYPE
    );

  
  PROCEDURE INS_DOCUMENT_TYPES
    (
     in_NAME                   IN ARCH.DOCUMENT_TYPES.NAME%TYPE
    ,in_PARENT_ID              IN ARCH.DOCUMENT_TYPES.PARENT_ID%TYPE
    ,in_DESCRIPTION            IN ARCH.DOCUMENT_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENT_TYPES.FULL_ACCESS%TYPE
    );
    
  PROCEDURE UPD_DOCUMENT_TYPES
    (
     in_ID                     IN ARCH.DOCUMENT_TYPES.ID%TYPE
    ,in_NAME                   IN ARCH.DOCUMENT_TYPES.NAME%TYPE
    ,in_PARENT_ID              IN ARCH.DOCUMENT_TYPES.PARENT_ID%TYPE
    ,in_DESCRIPTION            IN ARCH.DOCUMENT_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENT_TYPES.FULL_ACCESS%TYPE
    );

  PROCEDURE DEL_DOCUMENT_TYPES
    (
     in_ID                     IN ARCH.DOCUMENT_TYPES.ID%TYPE
    );

END DML_DOCUMENT_TYPES;
/

--
-- DML_DOCUMENTS  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_DOCUMENTS IS

  PROCEDURE INS_DOCUMENTS_WI
    (
     in_ID                     IN ARCH.DOCUMENTS.ID%TYPE,
     in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENTS.DOCUMENT_TYPE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.DOCUMENTS.CLIENT_ID%TYPE
    ,in_DOCUMENT_NUMBER        IN ARCH.DOCUMENTS.DOCUMENT_NUMBER%TYPE
    ,in_DOCUMENT_DATE          IN ARCH.DOCUMENTS.DOCUMENT_DATE%TYPE
    ,in_ADDRESS_ID             IN ARCH.DOCUMENTS.ADDRESS_ID%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENTS.FULL_ACCESS%TYPE
    );
    
    PROCEDURE INS_DOCUMENTS
    (
     in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENTS.DOCUMENT_TYPE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.DOCUMENTS.CLIENT_ID%TYPE
    ,in_DOCUMENT_NUMBER        IN ARCH.DOCUMENTS.DOCUMENT_NUMBER%TYPE
    ,in_DOCUMENT_DATE          IN ARCH.DOCUMENTS.DOCUMENT_DATE%TYPE
    ,in_ADDRESS_ID             IN ARCH.DOCUMENTS.ADDRESS_ID%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENTS.FULL_ACCESS%TYPE
    );

    PROCEDURE INS_DIRECTORY
    (
        in_DOCUMENT_NUMBER        IN ARCH.DOCUMENTS.DOCUMENT_NUMBER%TYPE
        ,in_FULL_ACCESS            IN ARCH.DOCUMENTS.FULL_ACCESS%TYPE
    );

  PROCEDURE UPD_DOCUMENTS
    (
     in_ID                     IN ARCH.DOCUMENTS.ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENTS.DOCUMENT_TYPE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.DOCUMENTS.CLIENT_ID%TYPE
    ,in_DOCUMENT_NUMBER        IN ARCH.DOCUMENTS.DOCUMENT_NUMBER%TYPE
    ,in_DOCUMENT_DATE          IN ARCH.DOCUMENTS.DOCUMENT_DATE%TYPE
    ,in_ADDRESS_ID             IN ARCH.DOCUMENTS.ADDRESS_ID%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENTS.FULL_ACCESS%TYPE
    );
    
    PROCEDURE UPD_DIRECTORY
    (
     in_ID                     IN ARCH.DOCUMENTS.ID%TYPE
    ,in_DOCUMENT_NUMBER        IN ARCH.DOCUMENTS.DOCUMENT_NUMBER%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENTS.FULL_ACCESS%TYPE
    );

  PROCEDURE DEL_DOCUMENTS
    (
     in_ID                     IN ARCH.DOCUMENTS.ID%TYPE
    );
    
    PROCEDURE DEL_DIRECTORY
    (
     in_ID                     IN ARCH.DOCUMENTS.ID%TYPE
    );

END DML_DOCUMENTS;
/

--
-- DML_REFERENCES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_REFERENCES IS

  PROCEDURE INS_REFERENCES
    (
     in_NAME                   IN ARCH.REFERENCES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCES.DESCRIPTION%TYPE
    ,in_REFENCE_TYPE_ID        IN ARCH.REFERENCES.REFENCE_TYPE_ID%TYPE
    );

 
  PROCEDURE INS_REFERENCES_WI
    (
     in_ID                     IN ARCH.REFERENCES.ID%TYPE
    ,in_NAME                   IN ARCH.REFERENCES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCES.DESCRIPTION%TYPE
    ,in_REFENCE_TYPE_ID        IN ARCH.REFERENCES.REFENCE_TYPE_ID%TYPE
    );

  PROCEDURE UPD_REFERENCES
    (
     in_ID                     IN ARCH.REFERENCES.ID%TYPE
    ,in_NAME                   IN ARCH.REFERENCES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCES.DESCRIPTION%TYPE
    ,in_REFENCE_TYPE_ID        IN ARCH.REFERENCES.REFENCE_TYPE_ID%TYPE
    );

  PROCEDURE DEL_REFERENCES
    (
     in_ID                     IN ARCH.REFERENCES.ID%TYPE
    );

END DML_REFERENCES;
/

--
-- DML_ROLE_CLIENT_ACCESS  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_ROLE_CLIENT_ACCESS IS

  PROCEDURE INS_ROLE_CLIENT_ACCESS
    (
     in_ROLE_ID                IN ARCH.ROLE_CLIENT_ACCESS.ROLE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.ROLE_CLIENT_ACCESS.CLIENT_ID%TYPE
    );

 PROCEDURE INS_ROLE_CLIENT_ACCESS_WI
    (
      in_ID                     IN ARCH.ROLE_CLIENT_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_CLIENT_ACCESS.ROLE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.ROLE_CLIENT_ACCESS.CLIENT_ID%TYPE
    );

  PROCEDURE UPD_ROLE_CLIENT_ACCESS
    (
     in_ID                     IN ARCH.ROLE_CLIENT_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_CLIENT_ACCESS.ROLE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.ROLE_CLIENT_ACCESS.CLIENT_ID%TYPE
    );

  PROCEDURE DEL_ROLE_CLIENT_ACCESS
    (
     in_ID                     IN ARCH.ROLE_CLIENT_ACCESS.ID%TYPE
    );

END DML_ROLE_CLIENT_ACCESS;
/

--
-- DML_ROLES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_ROLES IS

  PROCEDURE INS_ROLES_WI
    (
     in_ID                     IN ARCH.ROLES.ID%TYPE
    ,in_NAME                   IN ARCH.ROLES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ROLES.DESCRIPTION%TYPE
    );

  PROCEDURE INS_ROLES
    (
     in_NAME                   IN ARCH.ROLES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ROLES.DESCRIPTION%TYPE
    );

  PROCEDURE UPD_ROLES
    (
     in_ID                     IN ARCH.ROLES.ID%TYPE
    ,in_NAME                   IN ARCH.ROLES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ROLES.DESCRIPTION%TYPE
    );

  PROCEDURE DEL_ROLES
    (
     in_ID                     IN ARCH.ROLES.ID%TYPE
    );

END DML_ROLES;
/

--
-- DML_USER_CLIENT_ACCESS  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_USER_CLIENT_ACCESS IS

  PROCEDURE INS_USER_CLIENT_ACCESS
    (
     in_USER_ID                IN ARCH.USER_CLIENT_ACCESS.USER_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.USER_CLIENT_ACCESS.CLIENT_ID%TYPE
    );

  PROCEDURE INS_USER_CLIENT_ACCESS_WI
    (
    in_ID                     IN ARCH.USER_CLIENT_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_CLIENT_ACCESS.USER_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.USER_CLIENT_ACCESS.CLIENT_ID%TYPE
    );

  PROCEDURE UPD_USER_CLIENT_ACCESS
    (
     in_ID                     IN ARCH.USER_CLIENT_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_CLIENT_ACCESS.USER_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.USER_CLIENT_ACCESS.CLIENT_ID%TYPE
    );

  PROCEDURE DEL_USER_CLIENT_ACCESS
    (
     in_ID                     IN ARCH.USER_CLIENT_ACCESS.ID%TYPE
    );

END DML_USER_CLIENT_ACCESS;
/

--
-- DML_ADDRESS_DICTIONARY  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_ADDRESS_DICTIONARY IS

  PROCEDURE INS_ADDRESS_DICTIONARY_WI
    (
     in_ID                     IN ARCH.ADDRESS_DICTIONARY.ID%TYPE,
     in_PARENT_ID              IN ARCH.ADDRESS_DICTIONARY.PARENT_ID%TYPE
    ,in_NAME                   IN ARCH.ADDRESS_DICTIONARY.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ADDRESS_DICTIONARY.DESCRIPTION%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.ADDRESS_DICTIONARY
      (
      ID
      ,PARENT_ID
      ,NAME
      ,DESCRIPTION
      )
    VALUES
      (
      in_ID
       ,in_PARENT_ID
      ,in_NAME
      ,in_DESCRIPTION
      );
  END INS_ADDRESS_DICTIONARY_WI;

  PROCEDURE INS_ADDRESS_DICTIONARY
    (
     in_PARENT_ID              IN ARCH.ADDRESS_DICTIONARY.PARENT_ID%TYPE
    ,in_NAME                   IN ARCH.ADDRESS_DICTIONARY.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ADDRESS_DICTIONARY.DESCRIPTION%TYPE
    ) is
  begin
    INS_ADDRESS_DICTIONARY_WI(
                                ADDRESS_DICTIONARY_SEQ.NEXTVAL
                                ,in_PARENT_ID
                                ,in_NAME
                                ,in_DESCRIPTION
                                );
  END INS_ADDRESS_DICTIONARY;  

  PROCEDURE UPD_ADDRESS_DICTIONARY
    (
     in_ID                     IN ARCH.ADDRESS_DICTIONARY.ID%TYPE
    ,in_PARENT_ID              IN ARCH.ADDRESS_DICTIONARY.PARENT_ID%TYPE
    ,in_NAME                   IN ARCH.ADDRESS_DICTIONARY.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ADDRESS_DICTIONARY.DESCRIPTION%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.ADDRESS_DICTIONARY
    SET 
        PARENT_ID                = in_PARENT_ID
       ,NAME                     = in_NAME
       ,DESCRIPTION              = in_DESCRIPTION
    WHERE
        ID                       = in_ID;
  END UPD_ADDRESS_DICTIONARY;

  PROCEDURE DEL_ADDRESS_DICTIONARY
    (
     in_ID                     IN ARCH.ADDRESS_DICTIONARY.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.ADDRESS_DICTIONARY
    WHERE
        ID                       = in_ID;
  END DEL_ADDRESS_DICTIONARY;

END DML_ADDRESS_DICTIONARY;
/

--
-- DML_ATTRIBUTES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_ATTRIBUTES IS

  PROCEDURE INS_ATTRIBUTES_WI
    (
    in_ID                     IN ARCH.ATTRIBUTES.ID%TYPE
     ,in_NAME                   IN ARCH.ATTRIBUTES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ATTRIBUTES.DESCRIPTION%TYPE
    ,in_VALUETYPE              IN ARCH.ATTRIBUTES.VALUETYPE%TYPE
    ,in_REFERENCE_ID           IN ARCH.ATTRIBUTES.REFERENCE_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.ATTRIBUTES
      (
      ID
       ,NAME
      ,DESCRIPTION
      ,VALUETYPE
      ,REFERENCE_ID
      )
    VALUES
      (
      in_ID
       ,in_NAME
      ,in_DESCRIPTION
      ,in_VALUETYPE
      ,in_REFERENCE_ID
      );
  END INS_ATTRIBUTES_WI;

  PROCEDURE INS_ATTRIBUTES
    (
     in_NAME                   IN ARCH.ATTRIBUTES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ATTRIBUTES.DESCRIPTION%TYPE
    ,in_VALUETYPE              IN ARCH.ATTRIBUTES.VALUETYPE%TYPE
    ,in_REFERENCE_ID           IN ARCH.ATTRIBUTES.REFERENCE_ID%TYPE
    ) IS
  BEGIN
    INS_ATTRIBUTES_WI(
      ATTRIBUTES_SEQ.NEXTVAL
       ,in_NAME
      ,in_DESCRIPTION
      ,in_VALUETYPE
      ,in_REFERENCE_ID
      );
  END INS_ATTRIBUTES;

  PROCEDURE UPD_ATTRIBUTES
    (
     in_ID                     IN ARCH.ATTRIBUTES.ID%TYPE
    ,in_NAME                   IN ARCH.ATTRIBUTES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ATTRIBUTES.DESCRIPTION%TYPE
    ,in_VALUETYPE              IN ARCH.ATTRIBUTES.VALUETYPE%TYPE
    ,in_REFERENCE_ID           IN ARCH.ATTRIBUTES.REFERENCE_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.ATTRIBUTES
    SET 
        NAME                     = in_NAME
       ,DESCRIPTION              = in_DESCRIPTION
       ,VALUETYPE                = in_VALUETYPE
       ,REFERENCE_ID             = in_REFERENCE_ID
    WHERE
        ID                       = in_ID;
  END UPD_ATTRIBUTES;

  PROCEDURE DEL_ATTRIBUTES
    (
     in_ID                     IN ARCH.ATTRIBUTES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.ATTRIBUTES
    WHERE
        ID                       = in_ID;
  END DEL_ATTRIBUTES;

END DML_ATTRIBUTES;
/

--
-- DML_CLIENTS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_CLIENTS IS

  PROCEDURE INS_CLIENTS_WI
    (
    in_ID                     IN ARCH.CLIENTS.ID%TYPE,
     in_FULL_NAME              IN ARCH.CLIENTS.FULL_NAME%TYPE
    ,in_FIRST_NAME             IN ARCH.CLIENTS.FIRST_NAME%TYPE
    ,in_SUR_NAME               IN ARCH.CLIENTS.SUR_NAME%TYPE
    ,in_LAST_NAME              IN ARCH.CLIENTS.LAST_NAME%TYPE
    ,in_CLIENT_TYPE            IN ARCH.CLIENTS.CLIENT_TYPE%TYPE
    ,in_IDENTIFICATION_NUMBER  IN ARCH.CLIENTS.IDENTIFICATION_NUMBER%TYPE
    ,in_ADDRESS                IN ARCH.CLIENTS.ADDRESS%TYPE
    ,in_CONTACTS               IN ARCH.CLIENTS.CONTACTS%TYPE
    ,in_FULL_ACCESS            IN ARCH.CLIENTS.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.CLIENTS
      (
      ID,
       FULL_NAME
      ,FIRST_NAME
      ,SUR_NAME
      ,LAST_NAME
      ,CLIENT_TYPE
      ,IDENTIFICATION_NUMBER
      ,ADDRESS
      ,CONTACTS
      ,FULL_ACCESS
      )
    VALUES
      (
      in_ID,
       in_FULL_NAME
      ,in_FIRST_NAME
      ,in_SUR_NAME
      ,in_LAST_NAME
      ,in_CLIENT_TYPE
      ,in_IDENTIFICATION_NUMBER
      ,in_ADDRESS
      ,in_CONTACTS
      ,in_FULL_ACCESS
      );
  END INS_CLIENTS_WI;

   PROCEDURE INS_CLIENTS
    (
     in_FULL_NAME              IN ARCH.CLIENTS.FULL_NAME%TYPE
    ,in_FIRST_NAME             IN ARCH.CLIENTS.FIRST_NAME%TYPE
    ,in_SUR_NAME               IN ARCH.CLIENTS.SUR_NAME%TYPE
    ,in_LAST_NAME              IN ARCH.CLIENTS.LAST_NAME%TYPE
    ,in_CLIENT_TYPE            IN ARCH.CLIENTS.CLIENT_TYPE%TYPE
    ,in_IDENTIFICATION_NUMBER  IN ARCH.CLIENTS.IDENTIFICATION_NUMBER%TYPE
    ,in_ADDRESS                IN ARCH.CLIENTS.ADDRESS%TYPE
    ,in_CONTACTS               IN ARCH.CLIENTS.CONTACTS%TYPE
    ,in_FULL_ACCESS            IN ARCH.CLIENTS.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    INS_CLIENTS_WI(
    CLIENTS_SEQ.NEXTVAL,
       in_FULL_NAME
      ,in_FIRST_NAME
      ,in_SUR_NAME
      ,in_LAST_NAME
      ,in_CLIENT_TYPE
      ,in_IDENTIFICATION_NUMBER
      ,in_ADDRESS
      ,in_CONTACTS
      ,in_FULL_ACCESS
      );
  END INS_CLIENTS;

  PROCEDURE UPD_CLIENTS
    (
     in_ID                     IN ARCH.CLIENTS.ID%TYPE
    ,in_FULL_NAME              IN ARCH.CLIENTS.FULL_NAME%TYPE
    ,in_FIRST_NAME             IN ARCH.CLIENTS.FIRST_NAME%TYPE
    ,in_SUR_NAME               IN ARCH.CLIENTS.SUR_NAME%TYPE
    ,in_LAST_NAME              IN ARCH.CLIENTS.LAST_NAME%TYPE
    ,in_CLIENT_TYPE            IN ARCH.CLIENTS.CLIENT_TYPE%TYPE
    ,in_IDENTIFICATION_NUMBER  IN ARCH.CLIENTS.IDENTIFICATION_NUMBER%TYPE
    ,in_ADDRESS                IN ARCH.CLIENTS.ADDRESS%TYPE
    ,in_CONTACTS               IN ARCH.CLIENTS.CONTACTS%TYPE
    ,in_FULL_ACCESS            IN ARCH.CLIENTS.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.CLIENTS
    SET 
        FULL_NAME                = in_FULL_NAME
       ,FIRST_NAME               = in_FIRST_NAME
       ,SUR_NAME                 = in_SUR_NAME
       ,LAST_NAME                = in_LAST_NAME
       ,CLIENT_TYPE              = in_CLIENT_TYPE
       ,IDENTIFICATION_NUMBER    = in_IDENTIFICATION_NUMBER
       ,ADDRESS                  = in_ADDRESS
       ,CONTACTS                 = in_CONTACTS
       ,FULL_ACCESS              = in_FULL_ACCESS
    WHERE
        ID                       = in_ID;
  END UPD_CLIENTS;

  PROCEDURE DEL_CLIENTS
    (
     in_ID                     IN ARCH.CLIENTS.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.CLIENTS
    WHERE
        ID                       = in_ID;
  END DEL_CLIENTS;

END DML_CLIENTS;
/

--
-- DML_DOCUMENT_TYPE_ATTRIBUTES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_DOCUMENT_TYPE_ATTRIBUTES IS

  PROCEDURE INS_DOC_TYPE_ATTRIBUTES_WI
    (
     in_ID                     IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.DOCUMENT_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.MANDATORY%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.DOCUMENT_TYPE_ATTRIBUTES
      (
       ID
      ,DOCUMENT_TYPE_ID
      ,ATTRIBUTE_ID
      ,MANDATORY
      )
    VALUES
      (
       in_ID
      ,in_DOCUMENT_TYPE_ID
      ,in_ATTRIBUTE_ID
      ,in_MANDATORY
      );
  END INS_DOC_TYPE_ATTRIBUTES_WI;

   PROCEDURE INS_DOC_TYPE_ATTRIBUTES
    (
     in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.DOCUMENT_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.MANDATORY%TYPE
    ) IS
  BEGIN
    INS_DOC_TYPE_ATTRIBUTES_WI(
       DOCUMENT_TYPE_ATTRIBUTES_SEQ.NEXTVAL
      ,in_DOCUMENT_TYPE_ID
      ,in_ATTRIBUTE_ID
      ,in_MANDATORY
      );
  END INS_DOC_TYPE_ATTRIBUTES;

  PROCEDURE UPD_DOC_TYPE_ATTRIBUTES
    (
     in_ID                     IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.DOCUMENT_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.MANDATORY%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.DOCUMENT_TYPE_ATTRIBUTES
    SET 
        DOCUMENT_TYPE_ID         = in_DOCUMENT_TYPE_ID
       ,ATTRIBUTE_ID             = in_ATTRIBUTE_ID
       ,MANDATORY                = in_MANDATORY
    WHERE
        ID                       = in_ID;
  END UPD_DOC_TYPE_ATTRIBUTES;

  PROCEDURE DEL_DOC_TYPE_ATTRIBUTES
    (
     in_ID                     IN ARCH.DOCUMENT_TYPE_ATTRIBUTES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.DOCUMENT_TYPE_ATTRIBUTES
    WHERE
        ID                       = in_ID;
  END DEL_DOC_TYPE_ATTRIBUTES;

END DML_DOCUMENT_TYPE_ATTRIBUTES;
/

--
-- DML_DOCUMENT_TYPES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_DOCUMENT_TYPES IS

  PROCEDURE INS_DOCUMENT_TYPES_WI
    (
     in_ID                     IN ARCH.DOCUMENT_TYPES.ID%TYPE
    ,in_NAME                   IN ARCH.DOCUMENT_TYPES.NAME%TYPE
    ,in_PARENT_ID              IN ARCH.DOCUMENT_TYPES.PARENT_ID%TYPE
    ,in_DESCRIPTION            IN ARCH.DOCUMENT_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENT_TYPES.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.DOCUMENT_TYPES
      (
       ID
      ,NAME
      ,PARENT_ID
      ,DESCRIPTION
      ,FULL_ACCESS
      )
    VALUES
      (
       in_ID
      ,in_NAME
      ,in_PARENT_ID
      ,in_DESCRIPTION
      ,in_FULL_ACCESS
      );
  END INS_DOCUMENT_TYPES_WI;

 PROCEDURE INS_DOCUMENT_TYPES
    (
     in_NAME                   IN ARCH.DOCUMENT_TYPES.NAME%TYPE
    ,in_PARENT_ID              IN ARCH.DOCUMENT_TYPES.PARENT_ID%TYPE
    ,in_DESCRIPTION            IN ARCH.DOCUMENT_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENT_TYPES.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    INS_DOCUMENT_TYPES_WI(
       DOCUMENT_TYPES_SEQ.NEXTVAL
      ,in_NAME
      ,in_PARENT_ID
      ,in_DESCRIPTION
      ,in_FULL_ACCESS
      );
  END INS_DOCUMENT_TYPES;

  PROCEDURE UPD_DOCUMENT_TYPES
    (
     in_ID                     IN ARCH.DOCUMENT_TYPES.ID%TYPE
    ,in_NAME                   IN ARCH.DOCUMENT_TYPES.NAME%TYPE
    ,in_PARENT_ID              IN ARCH.DOCUMENT_TYPES.PARENT_ID%TYPE
    ,in_DESCRIPTION            IN ARCH.DOCUMENT_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENT_TYPES.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.DOCUMENT_TYPES
    SET 
        NAME                     = in_NAME
       ,PARENT_ID                = in_PARENT_ID
       ,DESCRIPTION              = in_DESCRIPTION
       ,FULL_ACCESS              = in_FULL_ACCESS
    WHERE
        ID                       = in_ID;
  END UPD_DOCUMENT_TYPES;

  PROCEDURE DEL_DOCUMENT_TYPES
    (
     in_ID                     IN ARCH.DOCUMENT_TYPES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.DOCUMENT_TYPES
    WHERE
        ID                       = in_ID;
  END DEL_DOCUMENT_TYPES;

END DML_DOCUMENT_TYPES;
/

--
-- DML_DOCUMENTS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_DOCUMENTS IS

  PROCEDURE INS_DOCUMENTS_wi
    (
    in_ID                     IN ARCH.DOCUMENTS.ID%TYPE,
     in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENTS.DOCUMENT_TYPE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.DOCUMENTS.CLIENT_ID%TYPE
    ,in_DOCUMENT_NUMBER        IN ARCH.DOCUMENTS.DOCUMENT_NUMBER%TYPE
    ,in_DOCUMENT_DATE          IN ARCH.DOCUMENTS.DOCUMENT_DATE%TYPE
    ,in_ADDRESS_ID             IN ARCH.DOCUMENTS.ADDRESS_ID%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENTS.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.DOCUMENTS
      (
      id,
       DOCUMENT_TYPE_ID
      ,CLIENT_ID
      ,DOCUMENT_NUMBER
      ,DOCUMENT_DATE
      ,ADDRESS_ID
      ,FULL_ACCESS
      )
    VALUES
      (
      in_id,
       in_DOCUMENT_TYPE_ID
      ,in_CLIENT_ID
      ,in_DOCUMENT_NUMBER
      ,in_DOCUMENT_DATE
      ,in_ADDRESS_ID
      ,in_FULL_ACCESS
      );
  END INS_DOCUMENTS_wi;
  
   PROCEDURE INS_DOCUMENTS
    (
     in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENTS.DOCUMENT_TYPE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.DOCUMENTS.CLIENT_ID%TYPE
    ,in_DOCUMENT_NUMBER        IN ARCH.DOCUMENTS.DOCUMENT_NUMBER%TYPE
    ,in_DOCUMENT_DATE          IN ARCH.DOCUMENTS.DOCUMENT_DATE%TYPE
    ,in_ADDRESS_ID             IN ARCH.DOCUMENTS.ADDRESS_ID%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENTS.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    INS_DOCUMENTS_wi(
     DOCUMENTS_SEQ.NEXTVAL,
       in_DOCUMENT_TYPE_ID
      ,in_CLIENT_ID
      ,in_DOCUMENT_NUMBER
      ,in_DOCUMENT_DATE
      ,in_ADDRESS_ID
      ,in_FULL_ACCESS
      );
  END INS_DOCUMENTS;

  PROCEDURE INS_DIRECTORY
    (
        in_DOCUMENT_NUMBER        IN ARCH.DOCUMENTS.DOCUMENT_NUMBER%TYPE
        ,in_FULL_ACCESS            IN ARCH.DOCUMENTS.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.DOCUMENTS
      (
       DOCUMENT_TYPE_ID
      ,CLIENT_ID
      ,DOCUMENT_NUMBER
      ,DOCUMENT_DATE
      ,FULL_ACCESS
      ,IS_DIRECTORY
      )
    VALUES
      (
       0
      ,0
      ,in_DOCUMENT_NUMBER
      ,SYSDATE
      ,in_FULL_ACCESS
      ,1
      );
  END INS_DIRECTORY;

  PROCEDURE UPD_DOCUMENTS
    (
     in_ID                     IN ARCH.DOCUMENTS.ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.DOCUMENTS.DOCUMENT_TYPE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.DOCUMENTS.CLIENT_ID%TYPE
    ,in_DOCUMENT_NUMBER        IN ARCH.DOCUMENTS.DOCUMENT_NUMBER%TYPE
    ,in_DOCUMENT_DATE          IN ARCH.DOCUMENTS.DOCUMENT_DATE%TYPE
    ,in_ADDRESS_ID             IN ARCH.DOCUMENTS.ADDRESS_ID%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENTS.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.DOCUMENTS
    SET 
        DOCUMENT_TYPE_ID         = in_DOCUMENT_TYPE_ID
       ,CLIENT_ID                = in_CLIENT_ID
       ,DOCUMENT_NUMBER          = in_DOCUMENT_NUMBER
       ,DOCUMENT_DATE            = in_DOCUMENT_DATE
       ,ADDRESS_ID               = in_ADDRESS_ID
       ,FULL_ACCESS              = in_FULL_ACCESS
    WHERE
        ID                       = in_ID;
  END UPD_DOCUMENTS;
  
  PROCEDURE UPD_DIRECTORY
    (
     in_ID                     IN ARCH.DOCUMENTS.ID%TYPE
    ,in_DOCUMENT_NUMBER        IN ARCH.DOCUMENTS.DOCUMENT_NUMBER%TYPE
    ,in_FULL_ACCESS            IN ARCH.DOCUMENTS.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.DOCUMENTS
    SET 
       DOCUMENT_NUMBER          = in_DOCUMENT_NUMBER
       ,FULL_ACCESS              = in_FULL_ACCESS
    WHERE
        ID                       = in_ID;
  END UPD_DIRECTORY;

  PROCEDURE DEL_DOCUMENTS
    (
     in_ID                     IN ARCH.DOCUMENTS.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.DOCUMENTS
    WHERE
        ID                       = in_ID;
  END DEL_DOCUMENTS;
  
    PROCEDURE DEL_DIRECTORY
    (
     in_ID                     IN ARCH.DOCUMENTS.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.DOCUMENTS
    WHERE
        ID                       = in_ID;
  END DEL_DIRECTORY;

END DML_DOCUMENTS;
/

--
-- DML_REFERENCES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_REFERENCES IS

  PROCEDURE INS_REFERENCES_WI
    (
     in_ID                     IN ARCH.REFERENCES.ID%TYPE
    ,in_NAME                   IN ARCH.REFERENCES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCES.DESCRIPTION%TYPE
    ,in_REFENCE_TYPE_ID        IN ARCH.REFERENCES.REFENCE_TYPE_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.REFERENCES
      (
       ID
      ,NAME
      ,DESCRIPTION
      ,REFENCE_TYPE_ID
      )
    VALUES
      (
       in_ID
      ,in_NAME
      ,in_DESCRIPTION
      ,in_REFENCE_TYPE_ID
      );
  END INS_REFERENCES_WI;

  PROCEDURE INS_REFERENCES
    (
     in_NAME                   IN ARCH.REFERENCES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCES.DESCRIPTION%TYPE
    ,in_REFENCE_TYPE_ID        IN ARCH.REFERENCES.REFENCE_TYPE_ID%TYPE
    ) IS
  BEGIN
    INS_REFERENCES_WI(
       REFERENCES_SEQ.NEXTVAL
      ,in_NAME
      ,in_DESCRIPTION
      ,in_REFENCE_TYPE_ID
      );
  END INS_REFERENCES;

  PROCEDURE UPD_REFERENCES
    (
     in_ID                     IN ARCH.REFERENCES.ID%TYPE
    ,in_NAME                   IN ARCH.REFERENCES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.REFERENCES.DESCRIPTION%TYPE
    ,in_REFENCE_TYPE_ID        IN ARCH.REFERENCES.REFENCE_TYPE_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.REFERENCES
    SET 
        NAME                     = in_NAME
       ,DESCRIPTION              = in_DESCRIPTION
       ,REFENCE_TYPE_ID          = in_REFENCE_TYPE_ID
    WHERE
        ID                       = in_ID;
  END UPD_REFERENCES;

  PROCEDURE DEL_REFERENCES
    (
     in_ID                     IN ARCH.REFERENCES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.REFERENCES
    WHERE
        ID                       = in_ID;
  END DEL_REFERENCES;

END DML_REFERENCES;
/

--
-- DML_ROLE_CLIENT_ACCESS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_ROLE_CLIENT_ACCESS IS

  PROCEDURE INS_ROLE_CLIENT_ACCESS_WI
    (
      in_ID                     IN ARCH.ROLE_CLIENT_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_CLIENT_ACCESS.ROLE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.ROLE_CLIENT_ACCESS.CLIENT_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.ROLE_CLIENT_ACCESS
      (
       ID
      ,ROLE_ID
      ,CLIENT_ID
      )
    VALUES
      (
       in_ID
      ,in_ROLE_ID
      ,in_CLIENT_ID
      );
  END INS_ROLE_CLIENT_ACCESS_WI;

    PROCEDURE INS_ROLE_CLIENT_ACCESS
    (
     in_ROLE_ID                IN ARCH.ROLE_CLIENT_ACCESS.ROLE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.ROLE_CLIENT_ACCESS.CLIENT_ID%TYPE
    ) IS
  BEGIN
    INS_ROLE_CLIENT_ACCESS_WI(
       ROLE_CLIENT_ACCESS_SEQ.NEXTVAL
      ,in_ROLE_ID
      ,in_CLIENT_ID
      );
  END INS_ROLE_CLIENT_ACCESS;

  PROCEDURE UPD_ROLE_CLIENT_ACCESS
    (
     in_ID                     IN ARCH.ROLE_CLIENT_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_CLIENT_ACCESS.ROLE_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.ROLE_CLIENT_ACCESS.CLIENT_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.ROLE_CLIENT_ACCESS
    SET 
        ROLE_ID                  = in_ROLE_ID
       ,CLIENT_ID                = in_CLIENT_ID
    WHERE
        ID                       = in_ID;
  END UPD_ROLE_CLIENT_ACCESS;

  PROCEDURE DEL_ROLE_CLIENT_ACCESS
    (
     in_ID                     IN ARCH.ROLE_CLIENT_ACCESS.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.ROLE_CLIENT_ACCESS
    WHERE
        ID                       = in_ID;
  END DEL_ROLE_CLIENT_ACCESS;

END DML_ROLE_CLIENT_ACCESS;
/

--
-- DML_ROLES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_ROLES IS

  PROCEDURE INS_ROLES_WI
    (
     in_ID                     IN ARCH.ROLES.ID%TYPE
    ,in_NAME                   IN ARCH.ROLES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ROLES.DESCRIPTION%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.ROLES
      (
       ID
      ,NAME
      ,DESCRIPTION
      )
    VALUES
      (
       in_ID
      ,in_NAME
      ,in_DESCRIPTION
      );
  END INS_ROLES_WI;

   PROCEDURE INS_ROLES
    (
     in_NAME                   IN ARCH.ROLES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ROLES.DESCRIPTION%TYPE
    ) IS
  BEGIN
    INS_ROLES_WI(
       ROLES_SEQ.NEXTVAL
      ,in_NAME
      ,in_DESCRIPTION
      );
  END INS_ROLES;

  PROCEDURE UPD_ROLES
    (
     in_ID                     IN ARCH.ROLES.ID%TYPE
    ,in_NAME                   IN ARCH.ROLES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.ROLES.DESCRIPTION%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.ROLES
    SET 
        NAME                     = in_NAME
       ,DESCRIPTION              = in_DESCRIPTION
    WHERE
        ID                       = in_ID;
  END UPD_ROLES;

  PROCEDURE DEL_ROLES
    (
     in_ID                     IN ARCH.ROLES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.ROLES
    WHERE
        ID                       = in_ID;
  END DEL_ROLES;

END DML_ROLES;
/

--
-- DML_USER_CLIENT_ACCESS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_USER_CLIENT_ACCESS IS

  PROCEDURE INS_USER_CLIENT_ACCESS_WI
    (
     in_ID                     IN ARCH.USER_CLIENT_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_CLIENT_ACCESS.USER_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.USER_CLIENT_ACCESS.CLIENT_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.USER_CLIENT_ACCESS
      (
       ID
      ,USER_ID
      ,CLIENT_ID
      )
    VALUES
      (
       in_ID
      ,in_USER_ID
      ,in_CLIENT_ID
      );
  END INS_USER_CLIENT_ACCESS_WI;

  PROCEDURE INS_USER_CLIENT_ACCESS
    (
     in_USER_ID                IN ARCH.USER_CLIENT_ACCESS.USER_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.USER_CLIENT_ACCESS.CLIENT_ID%TYPE
    ) IS
  BEGIN
    INS_USER_CLIENT_ACCESS_WI(
       USER_CLIENT_ACCESS_SEQ.NEXTVAL
      ,in_USER_ID
      ,in_CLIENT_ID
      );
  END INS_USER_CLIENT_ACCESS;
 

  PROCEDURE UPD_USER_CLIENT_ACCESS
    (
     in_ID                     IN ARCH.USER_CLIENT_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_CLIENT_ACCESS.USER_ID%TYPE
    ,in_CLIENT_ID              IN ARCH.USER_CLIENT_ACCESS.CLIENT_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.USER_CLIENT_ACCESS
    SET 
        USER_ID                  = in_USER_ID
       ,CLIENT_ID                = in_CLIENT_ID
    WHERE
        ID                       = in_ID;
  END UPD_USER_CLIENT_ACCESS;

  PROCEDURE DEL_USER_CLIENT_ACCESS
    (
     in_ID                     IN ARCH.USER_CLIENT_ACCESS.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.USER_CLIENT_ACCESS
    WHERE
        ID                       = in_ID;
  END DEL_USER_CLIENT_ACCESS;

END DML_USER_CLIENT_ACCESS;
/

--
-- GET_REFERENCES  (Function) 
--
CREATE OR REPLACE FUNCTION ARCH.GET_REFERENCES
 return sys_refcursor
AS
 c_ sys_refcursor;
BEGIN
    OPEN c_ FOR
      SELECT        
       ID
      ,NAME
      ,DESCRIPTION
      ,REFENCE_TYPE_ID FROM ARCH.REFERENCES;
      
      return c_;
END;
/

--
-- GET_REFERENCES2  (Function) 
--
CREATE OR REPLACE FUNCTION ARCH.GET_REFERENCES2
 return sys_refcursor
AS
 c_ sys_refcursor;
BEGIN
    OPEN c_ FOR
      SELECT        
       ID
      ,NAME
      ,DESCRIPTION
      ,REFENCE_TYPE_ID FROM ARCH.REFERENCES;
      
      return c_;
END;
/

--
-- CLIENTS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.CLIENTS_TRG 
BEFORE INSERT ON ARCH.CLIENTS 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT CLIENTS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- DOCUMENT_TYPE_ATTRIBUTES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.DOCUMENT_TYPE_ATTRIBUTES_TRG 
BEFORE INSERT ON ARCH.DOCUMENT_TYPE_ATTRIBUTES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT DOCUMENT_TYPE_ATTRIBUTES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- DOCUMENT_TYPES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.DOCUMENT_TYPES_TRG 
BEFORE INSERT ON ARCH.DOCUMENT_TYPES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT DOCUMENT_TYPES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- DOCUMENTS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.DOCUMENTS_TRG 
BEFORE INSERT ON ARCH.DOCUMENTS 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT DOCUMENTS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- REFERENCES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.REFERENCES_TRG 
BEFORE INSERT ON ARCH.REFERENCES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT REFERENCES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- ROLE_CLIENT_ACCESS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ROLE_CLIENT_ACCESS_TRG 
BEFORE INSERT ON ARCH.ROLE_CLIENT_ACCESS 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT ROLE_CLIENT_ACCESS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- ROLES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ROLES_TRG 
BEFORE INSERT ON ARCH.ROLES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- USER_CLIENT_ACCESS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.USER_CLIENT_ACCESS_TRG 
BEFORE INSERT ON ARCH.USER_CLIENT_ACCESS 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT USER_CLIENT_ACCESS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- DOCUMENT_TYPE_ATTRIBUTES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.DOCUMENT_TYPE_ATTRIBUTES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.DOCUMENT_TYPE_ATTRIBUTES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END DOCUMENT_TYPE_ATTRIBUTES_AUD;
/


--
-- ROLE_CLIENT_ACCESS_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ROLE_CLIENT_ACCESS_AUD
BEFORE INSERT OR UPDATE
ON ARCH.ROLE_CLIENT_ACCESS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END ROLE_CLIENT_ACCESS_AUD;
/


--
-- ADDRESS_DICTIONARY_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ADDRESS_DICTIONARY_TRG 
BEFORE INSERT ON ARCH.ADDRESS_DICTIONARY 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT ADDRESS_DICTIONARY_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- ATTRIBUTES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ATTRIBUTES_TRG 
BEFORE INSERT ON ARCH.ATTRIBUTES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT ATTRIBUTES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- ROLES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ROLES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.ROLES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID decimal(18,0);
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);
    
    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END ROLES_AUD;
/


--
-- ADDRESS_DICTIONARY_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ADDRESS_DICTIONARY_AUD
BEFORE INSERT OR UPDATE
ON ARCH.ADDRESS_DICTIONARY
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END ADDRESS_DICTIONARY_AUD;
/


--
-- ATTRIBUTES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ATTRIBUTES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.ATTRIBUTES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END ATTRIBUTES_AUD;
/


--
-- CLIENTS_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.CLIENTS_AUD
BEFORE INSERT OR UPDATE
ON ARCH.CLIENTS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END CLIENTS_AUD;
/


--
-- DOCUMENT_TYPES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.DOCUMENT_TYPES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.DOCUMENT_TYPES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END DOCUMENT_TYPES_AUD;
/


--
-- DOCUMENTS_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.DOCUMENTS_AUD
BEFORE INSERT OR UPDATE
ON ARCH.DOCUMENTS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END DOCUMENTS_AUD;
/


--
-- REFERENCES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.REFERENCES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.REFERENCES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END REFERENCES_AUD;
/


--
-- USER_CLIENT_ACCESS_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.USER_CLIENT_ACCESS_AUD
BEFORE INSERT OR UPDATE
ON ARCH.USER_CLIENT_ACCESS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);
    
    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END USER_CLIENT_ACCESS_AUD;
/


--
-- COPY_TYPES  (Table) 
--
CREATE TABLE ARCH.COPY_TYPES
(
  ID                      NUMBER(9)             NOT NULL,
  NAME                    NVARCHAR2(200)        NOT NULL,
  DESCRIPTION             NVARCHAR2(2000),
  FULL_ACCESS             NUMBER(1)             DEFAULT 1                     NOT NULL,
  DOCUMENT_TYPE_ID        NUMBER(9),
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- COPY_TYPE_ATTRIBUTES  (Table) 
--
CREATE TABLE ARCH.COPY_TYPE_ATTRIBUTES
(
  ID                      NUMBER(9)             NOT NULL,
  COPY_TYPE_ID            NUMBER(9)             NOT NULL,
  ATTRIBUTE_ID            NUMBER(9)             NOT NULL,
  MANDATORY               NUMBER(1)             NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- USER_DOC_TYPE_ACCESS  (Table) 
--
CREATE TABLE ARCH.USER_DOC_TYPE_ACCESS
(
  ID                      NUMBER(9)             NOT NULL,
  USER_ID                 NUMBER(9)             NOT NULL,
  DOCUMENT_TYPE_ID        NUMBER(9)             NOT NULL,
  COPY_TYPE_ID            NUMBER(9),
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- USER_ROLES  (Table) 
--
CREATE TABLE ARCH.USER_ROLES
(
  ID                      NUMBER(9)             NOT NULL,
  ROLE_ID                 NUMBER(9)             NOT NULL,
  USER_ID                 NUMBER(9)             NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- ROLE_DOC_TYPE_ACCESS  (Table) 
--
CREATE TABLE ARCH.ROLE_DOC_TYPE_ACCESS
(
  ID                      NUMBER(9)             NOT NULL,
  ROLE_ID                 NUMBER(9)             NOT NULL,
  DOCUMENT_TYPE_ID        NUMBER(9)             NOT NULL,
  COPY_TYPE_ID            NUMBER(9),
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- COPIES  (Table) 
--
CREATE TABLE ARCH.COPIES
(
  ID                      NUMBER(9)             NOT NULL,
  DOCUMENT_ID             NUMBER(9)             NOT NULL,
  COPY_TYPE_ID            NUMBER(9)             NOT NULL,
  NAME                    NVARCHAR2(500)        NOT NULL,
  FILE_NAME               NVARCHAR2(500)        NOT NULL,
  FILE_EXTENTION          VARCHAR2(500 BYTE)    NOT NULL,
  FILE_BODY               BLOB,
  PAGES_COUNT             INTEGER               DEFAULT 0                     NOT NULL,
  FULL_ACCESS             NUMBER(1)             DEFAULT 1                     NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- COPIES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.COPIES_PK ON ARCH.COPIES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- COPY_TYPE_ATTRIBUTES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.COPY_TYPE_ATTRIBUTES_PK ON ARCH.COPY_TYPE_ATTRIBUTES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- COPY_TYPES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.COPY_TYPES_PK ON ARCH.COPY_TYPES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- ROLE_DOCUMENT_TYPE_ACCESS_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.ROLE_DOCUMENT_TYPE_ACCESS_PK ON ARCH.ROLE_DOC_TYPE_ACCESS
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- USER_DOCUMENT_TYPE_ACCESS_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.USER_DOCUMENT_TYPE_ACCESS_PK ON ARCH.USER_DOC_TYPE_ACCESS
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- USER_ROLES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.USER_ROLES_PK ON ARCH.USER_ROLES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- DML_COPIES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_COPIES IS

  PROCEDURE INS_COPIES_WI
    (
     in_ID                     IN ARCH.COPIES.ID%TYPE,
     in_DOCUMENT_ID            IN ARCH.COPIES.DOCUMENT_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.COPIES.COPY_TYPE_ID%TYPE
    ,in_NAME                   IN ARCH.COPIES.NAME%TYPE
    ,in_FILE_NAME              IN ARCH.COPIES.FILE_NAME%TYPE
    ,in_FILE_EXTENTION         IN ARCH.COPIES.FILE_EXTENTION%TYPE
    ,in_FILE_BODY              IN ARCH.COPIES.FILE_BODY%TYPE
    ,in_PAGES_COUNT            IN ARCH.COPIES.PAGES_COUNT%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPIES.FULL_ACCESS%TYPE
    );

  PROCEDURE INS_COPIES
    (
     in_DOCUMENT_ID            IN ARCH.COPIES.DOCUMENT_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.COPIES.COPY_TYPE_ID%TYPE
    ,in_NAME                   IN ARCH.COPIES.NAME%TYPE
    ,in_FILE_NAME              IN ARCH.COPIES.FILE_NAME%TYPE
    ,in_FILE_EXTENTION         IN ARCH.COPIES.FILE_EXTENTION%TYPE
    ,in_FILE_BODY              IN ARCH.COPIES.FILE_BODY%TYPE
    ,in_PAGES_COUNT            IN ARCH.COPIES.PAGES_COUNT%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPIES.FULL_ACCESS%TYPE
    );

  PROCEDURE UPD_COPIES
    (
     in_ID                     IN ARCH.COPIES.ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.COPIES.DOCUMENT_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.COPIES.COPY_TYPE_ID%TYPE
    ,in_NAME                   IN ARCH.COPIES.NAME%TYPE
    ,in_FILE_NAME              IN ARCH.COPIES.FILE_NAME%TYPE
    ,in_FILE_EXTENTION         IN ARCH.COPIES.FILE_EXTENTION%TYPE
    ,in_FILE_BODY              IN ARCH.COPIES.FILE_BODY%TYPE
    ,in_PAGES_COUNT            IN ARCH.COPIES.PAGES_COUNT%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPIES.FULL_ACCESS%TYPE
    );

  PROCEDURE DEL_COPIES
    (
     in_ID                     IN ARCH.COPIES.ID%TYPE
    );

END DML_COPIES;
/

--
-- DML_COPY_TYPE_ATTRIBUTES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_COPY_TYPE_ATTRIBUTES IS

  PROCEDURE INS_COPY_TYPE_ATTRIBUTES_WI
    (
     in_ID                     IN ARCH.COPY_TYPE_ATTRIBUTES.ID%TYPE,
     in_COPY_TYPE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.COPY_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.COPY_TYPE_ATTRIBUTES.MANDATORY%TYPE
    );

  PROCEDURE INS_COPY_TYPE_ATTRIBUTES
    (
     in_COPY_TYPE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.COPY_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.COPY_TYPE_ATTRIBUTES.MANDATORY%TYPE
    );

  PROCEDURE UPD_COPY_TYPE_ATTRIBUTES
    (
     in_ID                     IN ARCH.COPY_TYPE_ATTRIBUTES.ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.COPY_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.COPY_TYPE_ATTRIBUTES.MANDATORY%TYPE
    );

  PROCEDURE DEL_COPY_TYPE_ATTRIBUTES
    (
     in_ID                     IN ARCH.COPY_TYPE_ATTRIBUTES.ID%TYPE
    );

END DML_COPY_TYPE_ATTRIBUTES;
/

--
-- DML_COPY_TYPES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_COPY_TYPES IS

  PROCEDURE INS_COPY_TYPES_WI
    (
     in_ID                     IN ARCH.COPY_TYPES.ID%TYPE,
     in_NAME                   IN ARCH.COPY_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.COPY_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPY_TYPES.FULL_ACCESS%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.COPY_TYPES.DOCUMENT_TYPE_ID%TYPE
    );
    
    PROCEDURE INS_COPY_TYPES
    (
     in_NAME                   IN ARCH.COPY_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.COPY_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPY_TYPES.FULL_ACCESS%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.COPY_TYPES.DOCUMENT_TYPE_ID%TYPE
    );

  
  PROCEDURE UPD_COPY_TYPES
    (
     in_ID                     IN ARCH.COPY_TYPES.ID%TYPE
    ,in_NAME                   IN ARCH.COPY_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.COPY_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPY_TYPES.FULL_ACCESS%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.COPY_TYPES.DOCUMENT_TYPE_ID%TYPE
    );

  PROCEDURE DEL_COPY_TYPES
    (
     in_ID                     IN ARCH.COPY_TYPES.ID%TYPE
    );

END DML_COPY_TYPES;
/

--
-- DML_USER_ROLES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_USER_ROLES IS

  PROCEDURE INS_USER_ROLES_WI
    (
     in_ID                     IN ARCH.USER_ROLES.ID%TYPE
    ,in_ROLE_ID                IN ARCH.USER_ROLES.ROLE_ID%TYPE
    ,in_USER_ID                IN ARCH.USER_ROLES.USER_ID%TYPE
    );

  PROCEDURE INS_USER_ROLES
    (
     in_ROLE_ID                IN ARCH.USER_ROLES.ROLE_ID%TYPE
    ,in_USER_ID                IN ARCH.USER_ROLES.USER_ID%TYPE
    );

  PROCEDURE UPD_USER_ROLES
    (
     in_ID                     IN ARCH.USER_ROLES.ID%TYPE
    ,in_ROLE_ID                IN ARCH.USER_ROLES.ROLE_ID%TYPE
    ,in_USER_ID                IN ARCH.USER_ROLES.USER_ID%TYPE
    );

  PROCEDURE DEL_USER_ROLES
    (
     in_ID                     IN ARCH.USER_ROLES.ID%TYPE
    );

END DML_USER_ROLES;
/

--
-- DML_ROLE_DOC_TYPE_ACCESS  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_ROLE_DOC_TYPE_ACCESS IS

  PROCEDURE INS_ROLE_DOC_TYPE_ACCESS
    (
     in_ROLE_ID                IN ARCH.ROLE_DOC_TYPE_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.ROLE_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.ROLE_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    );

  PROCEDURE INS_ROLE_DOC_TYPE_ACCESS_WI
    (
     in_ID                     IN ARCH.ROLE_DOC_TYPE_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_DOC_TYPE_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.ROLE_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.ROLE_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    );

  PROCEDURE UPD_ROLE_DOC_TYPE_ACCESS
    (
     in_ID                     IN ARCH.ROLE_DOC_TYPE_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_DOC_TYPE_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.ROLE_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.ROLE_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    );

  PROCEDURE DEL_ROLE_DOC_TYPE_ACCESS
    (
     in_ID                     IN ARCH.ROLE_DOC_TYPE_ACCESS.ID%TYPE
    );

END DML_ROLE_DOC_TYPE_ACCESS;
/

--
-- DML_USER_DOC_TYPE_ACCESS  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_USER_DOC_TYPE_ACCESS IS

  PROCEDURE INS_USER_DOC_TYPE_ACCESS_WI
    (
     in_ID                     IN ARCH.USER_DOC_TYPE_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_DOC_TYPE_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.USER_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.USER_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    );

  PROCEDURE INS_USER_DOC_TYPE_ACCESS
    (
     in_USER_ID                IN ARCH.USER_DOC_TYPE_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.USER_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.USER_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    );

  PROCEDURE UPD_USER_DOC_TYPE_ACCESS
    (
     in_ID                     IN ARCH.USER_DOC_TYPE_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_DOC_TYPE_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.USER_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.USER_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    );

  PROCEDURE DEL_USER_DOC_TYPE_ACCESS
    (
     in_ID                     IN ARCH.USER_DOC_TYPE_ACCESS.ID%TYPE
    );

END DML_USER_DOC_TYPE_ACCESS;
/

--
-- DML_COPIES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_COPIES IS

  PROCEDURE INS_COPIES_WI
    (
    in_ID                     IN ARCH.COPIES.ID%TYPE,
     in_DOCUMENT_ID            IN ARCH.COPIES.DOCUMENT_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.COPIES.COPY_TYPE_ID%TYPE
    ,in_NAME                   IN ARCH.COPIES.NAME%TYPE
    ,in_FILE_NAME              IN ARCH.COPIES.FILE_NAME%TYPE
    ,in_FILE_EXTENTION         IN ARCH.COPIES.FILE_EXTENTION%TYPE
    ,in_FILE_BODY              IN ARCH.COPIES.FILE_BODY%TYPE
    ,in_PAGES_COUNT            IN ARCH.COPIES.PAGES_COUNT%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPIES.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.COPIES
      (
      id,
       DOCUMENT_ID
      ,COPY_TYPE_ID
      ,NAME
      ,FILE_NAME
      ,FILE_EXTENTION
      ,FILE_BODY
      ,PAGES_COUNT
      ,FULL_ACCESS
      )
    VALUES
      (
      in_id,
       in_DOCUMENT_ID
      ,in_COPY_TYPE_ID
      ,in_NAME
      ,in_FILE_NAME
      ,in_FILE_EXTENTION
      ,in_FILE_BODY
      ,in_PAGES_COUNT
      ,in_FULL_ACCESS
      );
  END INS_COPIES_WI;

 
  PROCEDURE INS_COPIES
    (
     in_DOCUMENT_ID            IN ARCH.COPIES.DOCUMENT_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.COPIES.COPY_TYPE_ID%TYPE
    ,in_NAME                   IN ARCH.COPIES.NAME%TYPE
    ,in_FILE_NAME              IN ARCH.COPIES.FILE_NAME%TYPE
    ,in_FILE_EXTENTION         IN ARCH.COPIES.FILE_EXTENTION%TYPE
    ,in_FILE_BODY              IN ARCH.COPIES.FILE_BODY%TYPE
    ,in_PAGES_COUNT            IN ARCH.COPIES.PAGES_COUNT%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPIES.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    INS_COPIES_WI(
    COPIES_SEQ.NEXTVAL,
       in_DOCUMENT_ID
      ,in_COPY_TYPE_ID
      ,in_NAME
      ,in_FILE_NAME
      ,in_FILE_EXTENTION
      ,in_FILE_BODY
      ,in_PAGES_COUNT
      ,in_FULL_ACCESS
      );
  END INS_COPIES;

  PROCEDURE UPD_COPIES
    (
     in_ID                     IN ARCH.COPIES.ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.COPIES.DOCUMENT_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.COPIES.COPY_TYPE_ID%TYPE
    ,in_NAME                   IN ARCH.COPIES.NAME%TYPE
    ,in_FILE_NAME              IN ARCH.COPIES.FILE_NAME%TYPE
    ,in_FILE_EXTENTION         IN ARCH.COPIES.FILE_EXTENTION%TYPE
    ,in_FILE_BODY              IN ARCH.COPIES.FILE_BODY%TYPE
    ,in_PAGES_COUNT            IN ARCH.COPIES.PAGES_COUNT%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPIES.FULL_ACCESS%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.COPIES
    SET 
        DOCUMENT_ID              = in_DOCUMENT_ID
       ,COPY_TYPE_ID             = in_COPY_TYPE_ID
       ,NAME                     = in_NAME
       ,FILE_NAME                = in_FILE_NAME
       ,FILE_EXTENTION           = in_FILE_EXTENTION
       ,FILE_BODY                = in_FILE_BODY
       ,PAGES_COUNT              = in_PAGES_COUNT
       ,FULL_ACCESS              = in_FULL_ACCESS
    WHERE
        ID                       = in_ID;
  END UPD_COPIES;

  PROCEDURE DEL_COPIES
    (
     in_ID                     IN ARCH.COPIES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.COPIES
    WHERE
        ID                       = in_ID;
  END DEL_COPIES;

END DML_COPIES;
/

--
-- DML_COPY_TYPE_ATTRIBUTES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_COPY_TYPE_ATTRIBUTES IS

  PROCEDURE INS_COPY_TYPE_ATTRIBUTES_wi
    (
    in_ID                     IN ARCH.COPY_TYPE_ATTRIBUTES.ID%TYPE,
     in_COPY_TYPE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.COPY_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.COPY_TYPE_ATTRIBUTES.MANDATORY%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.COPY_TYPE_ATTRIBUTES
      (
      id,
       COPY_TYPE_ID
      ,ATTRIBUTE_ID
      ,MANDATORY
      )
    VALUES
      (in_id,
       in_COPY_TYPE_ID
      ,in_ATTRIBUTE_ID
      ,in_MANDATORY
      );
  END INS_COPY_TYPE_ATTRIBUTES_wi;

  PROCEDURE INS_COPY_TYPE_ATTRIBUTES
    (
     in_COPY_TYPE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.COPY_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.COPY_TYPE_ATTRIBUTES.MANDATORY%TYPE
    ) IS
  BEGIN
    INS_COPY_TYPE_ATTRIBUTES_wi(
     COPY_TYPE_ATTRIBUTES_SEQ.NEXTVAL,
       in_COPY_TYPE_ID
      ,in_ATTRIBUTE_ID
      ,in_MANDATORY
      );
  END INS_COPY_TYPE_ATTRIBUTES;

  PROCEDURE UPD_COPY_TYPE_ATTRIBUTES
    (
     in_ID                     IN ARCH.COPY_TYPE_ATTRIBUTES.ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.COPY_TYPE_ID%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.COPY_TYPE_ATTRIBUTES.ATTRIBUTE_ID%TYPE
    ,in_MANDATORY              IN ARCH.COPY_TYPE_ATTRIBUTES.MANDATORY%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.COPY_TYPE_ATTRIBUTES
    SET 
        COPY_TYPE_ID             = in_COPY_TYPE_ID
       ,ATTRIBUTE_ID             = in_ATTRIBUTE_ID
       ,MANDATORY                = in_MANDATORY
    WHERE
        ID                       = in_ID;
  END UPD_COPY_TYPE_ATTRIBUTES;

  PROCEDURE DEL_COPY_TYPE_ATTRIBUTES
    (
     in_ID                     IN ARCH.COPY_TYPE_ATTRIBUTES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.COPY_TYPE_ATTRIBUTES
    WHERE
        ID                       = in_ID;
  END DEL_COPY_TYPE_ATTRIBUTES;

END DML_COPY_TYPE_ATTRIBUTES;
/

--
-- DML_COPY_TYPES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_COPY_TYPES IS

  PROCEDURE INS_COPY_TYPES_wi
    (
    in_ID                     IN ARCH.COPY_TYPES.ID%TYPE,
     in_NAME                   IN ARCH.COPY_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.COPY_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPY_TYPES.FULL_ACCESS%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.COPY_TYPES.DOCUMENT_TYPE_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.COPY_TYPES
      (
      id
       ,NAME
      ,DESCRIPTION
      ,FULL_ACCESS
      ,DOCUMENT_TYPE_ID
      )
    VALUES
      (in_id,
       in_NAME
      ,in_DESCRIPTION
      ,in_FULL_ACCESS
      ,in_DOCUMENT_TYPE_ID
      );
  END INS_COPY_TYPES_wi;

  PROCEDURE INS_COPY_TYPES
    (
     in_NAME                   IN ARCH.COPY_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.COPY_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPY_TYPES.FULL_ACCESS%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.COPY_TYPES.DOCUMENT_TYPE_ID%TYPE
    ) IS
  BEGIN
    INS_COPY_TYPES_wi(
     COPY_TYPES_SEQ.NEXTVAL,
       in_NAME
      ,in_DESCRIPTION
      ,in_FULL_ACCESS
      ,in_DOCUMENT_TYPE_ID
      );
  END INS_COPY_TYPES;

  PROCEDURE UPD_COPY_TYPES
    (
     in_ID                     IN ARCH.COPY_TYPES.ID%TYPE
    ,in_NAME                   IN ARCH.COPY_TYPES.NAME%TYPE
    ,in_DESCRIPTION            IN ARCH.COPY_TYPES.DESCRIPTION%TYPE
    ,in_FULL_ACCESS            IN ARCH.COPY_TYPES.FULL_ACCESS%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.COPY_TYPES.DOCUMENT_TYPE_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.COPY_TYPES
    SET 
        NAME                     = in_NAME
       ,DESCRIPTION              = in_DESCRIPTION
       ,FULL_ACCESS              = in_FULL_ACCESS
       ,DOCUMENT_TYPE_ID         = in_DOCUMENT_TYPE_ID
    WHERE
        ID                       = in_ID;
  END UPD_COPY_TYPES;

  PROCEDURE DEL_COPY_TYPES
    (
     in_ID                     IN ARCH.COPY_TYPES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.COPY_TYPES
    WHERE
        ID                       = in_ID;
  END DEL_COPY_TYPES;

END DML_COPY_TYPES;
/

--
-- DML_USER_ROLES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_USER_ROLES IS

  PROCEDURE INS_USER_ROLES_WI
    (
     in_ID                     IN ARCH.USER_ROLES.ID%TYPE
    ,in_ROLE_ID                IN ARCH.USER_ROLES.ROLE_ID%TYPE
    ,in_USER_ID                IN ARCH.USER_ROLES.USER_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.USER_ROLES
      (
       ID
      ,ROLE_ID
      ,USER_ID
      )
    VALUES
      (
       in_ID
      ,in_ROLE_ID
      ,in_USER_ID
      );
  END INS_USER_ROLES_WI;

  PROCEDURE INS_USER_ROLES
    (
     in_ROLE_ID                IN ARCH.USER_ROLES.ROLE_ID%TYPE
    ,in_USER_ID                IN ARCH.USER_ROLES.USER_ID%TYPE
    ) IS
  BEGIN
    INS_USER_ROLES_WI(
       USER_ROLES_SEQ.NEXTVAL
      ,in_ROLE_ID
      ,in_USER_ID
      );
  END INS_USER_ROLES;

  PROCEDURE UPD_USER_ROLES
    (
     in_ID                     IN ARCH.USER_ROLES.ID%TYPE
    ,in_ROLE_ID                IN ARCH.USER_ROLES.ROLE_ID%TYPE
    ,in_USER_ID                IN ARCH.USER_ROLES.USER_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.USER_ROLES
    SET 
        ROLE_ID                  = in_ROLE_ID
       ,USER_ID                  = in_USER_ID
    WHERE
        ID                       = in_ID;
  END UPD_USER_ROLES;

  PROCEDURE DEL_USER_ROLES
    (
     in_ID                     IN ARCH.USER_ROLES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.USER_ROLES
    WHERE
        ID                       = in_ID;
  END DEL_USER_ROLES;

END DML_USER_ROLES;
/

--
-- DML_ROLE_DOC_TYPE_ACCESS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_ROLE_DOC_TYPE_ACCESS IS

  PROCEDURE INS_ROLE_DOC_TYPE_ACCESS_WI
    (
     in_ID                     IN ARCH.ROLE_DOC_TYPE_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_DOC_TYPE_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.ROLE_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.ROLE_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.ROLE_DOC_TYPE_ACCESS
      (
       ID
      ,ROLE_ID
      ,DOCUMENT_TYPE_ID
      ,COPY_TYPE_ID
      )
    VALUES
      (
       in_ID
      ,in_ROLE_ID
      ,in_DOCUMENT_TYPE_ID
      ,in_COPY_TYPE_ID
      );
  END INS_ROLE_DOC_TYPE_ACCESS_WI;

  PROCEDURE INS_ROLE_DOC_TYPE_ACCESS
    (
     in_ROLE_ID                IN ARCH.ROLE_DOC_TYPE_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.ROLE_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.ROLE_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    ) IS
  BEGIN
    INS_ROLE_DOC_TYPE_ACCESS_WI(
       ROLE_DOCUMENT_TYPE_ACCESS_SEQ.NEXTVAL
      ,in_ROLE_ID
      ,in_DOCUMENT_TYPE_ID
      ,in_COPY_TYPE_ID
      );
  END INS_ROLE_DOC_TYPE_ACCESS;

  PROCEDURE UPD_ROLE_DOC_TYPE_ACCESS
    (
     in_ID                     IN ARCH.ROLE_DOC_TYPE_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_DOC_TYPE_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.ROLE_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.ROLE_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.ROLE_DOC_TYPE_ACCESS
    SET 
        ROLE_ID                  = in_ROLE_ID
       ,DOCUMENT_TYPE_ID         = in_DOCUMENT_TYPE_ID
       ,COPY_TYPE_ID             = in_COPY_TYPE_ID
    WHERE
        ID                       = in_ID;
  END UPD_ROLE_DOC_TYPE_ACCESS;

  PROCEDURE DEL_ROLE_DOC_TYPE_ACCESS
    (
     in_ID                     IN ARCH.ROLE_DOC_TYPE_ACCESS.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.ROLE_DOC_TYPE_ACCESS
    WHERE
        ID                       = in_ID;
  END DEL_ROLE_DOC_TYPE_ACCESS;

END DML_ROLE_DOC_TYPE_ACCESS;
/

--
-- DML_USER_DOC_TYPE_ACCESS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_USER_DOC_TYPE_ACCESS IS

  PROCEDURE INS_USER_DOC_TYPE_ACCESS_WI
    (
     in_ID                     IN ARCH.USER_DOC_TYPE_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_DOC_TYPE_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.USER_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.USER_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.USER_DOC_TYPE_ACCESS
      (
       ID
      ,USER_ID
      ,DOCUMENT_TYPE_ID
      ,COPY_TYPE_ID
      )
    VALUES
      (
       in_ID
      ,in_USER_ID
      ,in_DOCUMENT_TYPE_ID
      ,in_COPY_TYPE_ID
      );
  END INS_USER_DOC_TYPE_ACCESS_WI;


  PROCEDURE INS_USER_DOC_TYPE_ACCESS
    (
     in_USER_ID                IN ARCH.USER_DOC_TYPE_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.USER_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.USER_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    ) IS
  BEGIN
    INS_USER_DOC_TYPE_ACCESS_WI(
       USER_DOCUMENT_TYPE_ACCESS_SEQ.NEXTVAL
      ,in_USER_ID
      ,in_DOCUMENT_TYPE_ID
      ,in_COPY_TYPE_ID
      );
  END INS_USER_DOC_TYPE_ACCESS;
  
  PROCEDURE UPD_USER_DOC_TYPE_ACCESS
    (
     in_ID                     IN ARCH.USER_DOC_TYPE_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_DOC_TYPE_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_TYPE_ID       IN ARCH.USER_DOC_TYPE_ACCESS.DOCUMENT_TYPE_ID%TYPE
    ,in_COPY_TYPE_ID           IN ARCH.USER_DOC_TYPE_ACCESS.COPY_TYPE_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.USER_DOC_TYPE_ACCESS
    SET 
        USER_ID                  = in_USER_ID
       ,DOCUMENT_TYPE_ID         = in_DOCUMENT_TYPE_ID
       ,COPY_TYPE_ID             = in_COPY_TYPE_ID
    WHERE
        ID                       = in_ID;
  END UPD_USER_DOC_TYPE_ACCESS;

  PROCEDURE DEL_USER_DOC_TYPE_ACCESS
    (
     in_ID                     IN ARCH.USER_DOC_TYPE_ACCESS.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.USER_DOC_TYPE_ACCESS
    WHERE
        ID                       = in_ID;
  END DEL_USER_DOC_TYPE_ACCESS;

END DML_USER_DOC_TYPE_ACCESS;
/

--
-- COPIES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.COPIES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.COPIES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END COPIES_AUD;
/


--
-- COPIES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.COPIES_TRG 
BEFORE INSERT ON ARCH.COPIES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT COPIES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- COPY_TYPE_ATTRIBUTES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.COPY_TYPE_ATTRIBUTES_TRG 
BEFORE INSERT ON ARCH.COPY_TYPE_ATTRIBUTES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT COPY_TYPE_ATTRIBUTES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- COPY_TYPES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.COPY_TYPES_TRG 
BEFORE INSERT ON ARCH.COPY_TYPES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT COPY_TYPES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- ROLE_DOCUMENT_TYPE_ACCESS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ROLE_DOCUMENT_TYPE_ACCESS_TRG 
BEFORE INSERT ON ARCH.ROLE_DOC_TYPE_ACCESS 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT ROLE_DOCUMENT_TYPE_ACCESS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- USER_DOCUMENT_TYPE_ACCESS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.USER_DOCUMENT_TYPE_ACCESS_TRG 
BEFORE INSERT ON ARCH.USER_DOC_TYPE_ACCESS 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT USER_DOCUMENT_TYPE_ACCESS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- USER_ROLES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.USER_ROLES_TRG 
BEFORE INSERT ON ARCH.USER_ROLES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT USER_ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- USER_DOCUMENT_TYPE_ACCESS_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.USER_DOCUMENT_TYPE_ACCESS_AUD
BEFORE INSERT OR UPDATE
ON ARCH.USER_DOC_TYPE_ACCESS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END USER_DOCUMENT_TYPE_ACCESS_AUD;
/


--
-- USER_ROLES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.USER_ROLES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.USER_ROLES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END USER_ROLES_AUD;
/


--
-- COPY_TYPE_ATTRIBUTES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.COPY_TYPE_ATTRIBUTES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.COPY_TYPE_ATTRIBUTES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END COPY_TYPE_ATTRIBUTES_AUD;
/


--
-- COPY_TYPES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.COPY_TYPES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.COPY_TYPES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END COPY_TYPES_AUD;
/


--
-- ROLE_DOCUMENT_TYPE_ACCESS_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ROLE_DOCUMENT_TYPE_ACCESS_AUD
BEFORE INSERT OR UPDATE
ON ARCH.ROLE_DOC_TYPE_ACCESS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END ROLE_DOCUMENT_TYPE_ACCESS_AUD;
/


--
-- MOVEMENT  (Table) 
--
CREATE TABLE ARCH.MOVEMENT
(
  ID                      NUMBER(9)             NOT NULL,
  COPY_ID                 NUMBER(9),
  CLINET_ID               NUMBER(9)             NOT NULL,
  MOVEMENT_DATE           DATE                  NOT NULL,
  PLAN_RETURN_DATE        DATE                  NOT NULL,
  ACTUAL_RETURN_DATE      DATE,
  TAKE_DESCRIPTION        NVARCHAR2(2000),
  RETURN_DESCRIPTION      NVARCHAR2(2000),
  DOCUMENT_ID             NUMBER(9)             NOT NULL,
  TAKE_ADDRESS_ID         NUMBER(9)             NOT NULL,
  RETURN_ADDRESS_ID       NUMBER(9),
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- ATTRIBUTES_VALUES  (Table) 
--
CREATE TABLE ARCH.ATTRIBUTES_VALUES
(
  ID                      NUMBER(9),
  DOCUMENT_ID             NUMBER(9)             NOT NULL,
  COPY_ID                 NUMBER(9),
  STRING_VALUE            NVARCHAR2(2000),
  DECIMAL_VALUE           NUMBER(18,4),
  INT_VALUE               INTEGER,
  DATE_VALUE              DATE,
  BOOLEAN_VALUE           NUMBER(1),
  REFERENCE_VALUE         NUMBER(9),
  ATTRIBUTE_ID            NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- USER_DOCUMENT_ACCESS  (Table) 
--
CREATE TABLE ARCH.USER_DOCUMENT_ACCESS
(
  ID                      NUMBER(9)             NOT NULL,
  USER_ID                 NUMBER(9)             NOT NULL,
  DOCUMENT_ID             NUMBER(9)             NOT NULL,
  COPY_ID                 NUMBER(9),
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- ROLE_DOCUMENT_ACCESS  (Table) 
--
CREATE TABLE ARCH.ROLE_DOCUMENT_ACCESS
(
  ID                      NUMBER(9)             NOT NULL,
  ROLE_ID                 NUMBER(9)             NOT NULL,
  DOCUMENT_ID             NUMBER(9)             NOT NULL,
  COPY_ID                 NUMBER(9),
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- DOCUMENT_HISTORY  (Table) 
--
CREATE TABLE ARCH.DOCUMENT_HISTORY
(
  ID                      NUMBER(9)             NOT NULL,
  DOCUMENT_ID             NUMBER(9)             NOT NULL,
  USER_ID                 NUMBER(9)             NOT NULL,
  COPY_ID                 NUMBER(9),
  ACTION                  NVARCHAR2(100)        NOT NULL,
  ACTION_DATE             DATE                  NOT NULL,
  AUD_CREATE_USER_ID      NUMBER(9)             NOT NULL,
  AUD_MODIFY_USER_ID      NUMBER(9)             NOT NULL,
  AUD_CREATE_TIME         DATE                  NOT NULL,
  AUD_MODIFY_TIME         DATE                  NOT NULL,
  AUD_CREATE_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_OS_USER      NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_HOST         NVARCHAR2(250)        NOT NULL,
  AUD_CREATE_APPLICATION  NVARCHAR2(250)        NOT NULL,
  AUD_MODIFY_APPLICATION  NVARCHAR2(250)        NOT NULL
)
TABLESPACE SYSTEM
RESULT_CACHE (MODE DEFAULT)
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           )
NOCOMPRESS ;


--
-- ATTRIBUTES_VALUES_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.ATTRIBUTES_VALUES_PK ON ARCH.ATTRIBUTES_VALUES
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- DOCUMENT_HISTORY_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.DOCUMENT_HISTORY_PK ON ARCH.DOCUMENT_HISTORY
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- MOVEMENT_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.MOVEMENT_PK ON ARCH.MOVEMENT
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- ROLE_DOCUMENT_ACCESS_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.ROLE_DOCUMENT_ACCESS_PK ON ARCH.ROLE_DOCUMENT_ACCESS
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- USER_DOCUMENT_ACCESS_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH.USER_DOCUMENT_ACCESS_PK ON ARCH.USER_DOCUMENT_ACCESS
(ID)
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
            FLASH_CACHE      DEFAULT
            CELL_FLASH_CACHE DEFAULT
           );


--
-- DML_ATTRIBUTES_VALUES  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_ATTRIBUTES_VALUES IS

  PROCEDURE INS_ATTRIBUTES_VALUES
    (
     in_DOCUMENT_ID            IN ARCH.ATTRIBUTES_VALUES.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ATTRIBUTES_VALUES.COPY_ID%TYPE
    ,in_STRING_VALUE           IN ARCH.ATTRIBUTES_VALUES.STRING_VALUE%TYPE
    ,in_DECIMAL_VALUE          IN ARCH.ATTRIBUTES_VALUES.DECIMAL_VALUE%TYPE
    ,in_INT_VALUE              IN ARCH.ATTRIBUTES_VALUES.INT_VALUE%TYPE
    ,in_DATE_VALUE             IN ARCH.ATTRIBUTES_VALUES.DATE_VALUE%TYPE
    ,in_BOOLEAN_VALUE          IN ARCH.ATTRIBUTES_VALUES.BOOLEAN_VALUE%TYPE
    ,in_REFERENCE_VALUE        IN ARCH.ATTRIBUTES_VALUES.REFERENCE_VALUE%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.ATTRIBUTES_VALUES.ATTRIBUTE_ID%TYPE
    );

   PROCEDURE INS_ATTRIBUTES_VALUES_WI
    (
     in_ID                     IN ARCH.ATTRIBUTES_VALUES.ID%TYPE,
     in_DOCUMENT_ID            IN ARCH.ATTRIBUTES_VALUES.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ATTRIBUTES_VALUES.COPY_ID%TYPE
    ,in_STRING_VALUE           IN ARCH.ATTRIBUTES_VALUES.STRING_VALUE%TYPE
    ,in_DECIMAL_VALUE          IN ARCH.ATTRIBUTES_VALUES.DECIMAL_VALUE%TYPE
    ,in_INT_VALUE              IN ARCH.ATTRIBUTES_VALUES.INT_VALUE%TYPE
    ,in_DATE_VALUE             IN ARCH.ATTRIBUTES_VALUES.DATE_VALUE%TYPE
    ,in_BOOLEAN_VALUE          IN ARCH.ATTRIBUTES_VALUES.BOOLEAN_VALUE%TYPE
    ,in_REFERENCE_VALUE        IN ARCH.ATTRIBUTES_VALUES.REFERENCE_VALUE%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.ATTRIBUTES_VALUES.ATTRIBUTE_ID%TYPE
    );

  PROCEDURE UPD_ATTRIBUTES_VALUES
    (
     in_ID                     IN ARCH.ATTRIBUTES_VALUES.ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.ATTRIBUTES_VALUES.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ATTRIBUTES_VALUES.COPY_ID%TYPE
    ,in_STRING_VALUE           IN ARCH.ATTRIBUTES_VALUES.STRING_VALUE%TYPE
    ,in_DECIMAL_VALUE          IN ARCH.ATTRIBUTES_VALUES.DECIMAL_VALUE%TYPE
    ,in_INT_VALUE              IN ARCH.ATTRIBUTES_VALUES.INT_VALUE%TYPE
    ,in_DATE_VALUE             IN ARCH.ATTRIBUTES_VALUES.DATE_VALUE%TYPE
    ,in_BOOLEAN_VALUE          IN ARCH.ATTRIBUTES_VALUES.BOOLEAN_VALUE%TYPE
    ,in_REFERENCE_VALUE        IN ARCH.ATTRIBUTES_VALUES.REFERENCE_VALUE%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.ATTRIBUTES_VALUES.ATTRIBUTE_ID%TYPE
    );

  PROCEDURE DEL_ATTRIBUTES_VALUES
    (
     in_ID                     IN ARCH.ATTRIBUTES_VALUES.ID%TYPE
    );

END DML_ATTRIBUTES_VALUES;
/

--
-- DML_DOCUMENT_HISTORY  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_DOCUMENT_HISTORY IS

  PROCEDURE INS_DOCUMENT_HISTORY_wi
    (
    in_ID                     IN ARCH.DOCUMENT_HISTORY.ID%TYPE,
     in_DOCUMENT_ID            IN ARCH.DOCUMENT_HISTORY.DOCUMENT_ID%TYPE
    ,in_USER_ID                IN ARCH.DOCUMENT_HISTORY.USER_ID%TYPE
    ,in_COPY_ID                IN ARCH.DOCUMENT_HISTORY.COPY_ID%TYPE
    ,in_ACTION                 IN ARCH.DOCUMENT_HISTORY.ACTION%TYPE
    ,in_ACTION_DATE            IN ARCH.DOCUMENT_HISTORY.ACTION_DATE%TYPE
    );

    PROCEDURE INS_DOCUMENT_HISTORY
    (
     in_DOCUMENT_ID            IN ARCH.DOCUMENT_HISTORY.DOCUMENT_ID%TYPE
    ,in_USER_ID                IN ARCH.DOCUMENT_HISTORY.USER_ID%TYPE
    ,in_COPY_ID                IN ARCH.DOCUMENT_HISTORY.COPY_ID%TYPE
    ,in_ACTION                 IN ARCH.DOCUMENT_HISTORY.ACTION%TYPE
    ,in_ACTION_DATE            IN ARCH.DOCUMENT_HISTORY.ACTION_DATE%TYPE
    );

  PROCEDURE UPD_DOCUMENT_HISTORY
    (
     in_ID                     IN ARCH.DOCUMENT_HISTORY.ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.DOCUMENT_HISTORY.DOCUMENT_ID%TYPE
    ,in_USER_ID                IN ARCH.DOCUMENT_HISTORY.USER_ID%TYPE
    ,in_COPY_ID                IN ARCH.DOCUMENT_HISTORY.COPY_ID%TYPE
    ,in_ACTION                 IN ARCH.DOCUMENT_HISTORY.ACTION%TYPE
    ,in_ACTION_DATE            IN ARCH.DOCUMENT_HISTORY.ACTION_DATE%TYPE
    
    );

  PROCEDURE DEL_DOCUMENT_HISTORY
    (
     in_ID                     IN ARCH.DOCUMENT_HISTORY.ID%TYPE
    );

END DML_DOCUMENT_HISTORY;
/

--
-- DML_MOVEMENT  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_MOVEMENT IS

  PROCEDURE INS_MOVEMENT_WI
    (
     in_ID                     IN ARCH.MOVEMENT.ID%TYPE
    ,in_COPY_ID                IN ARCH.MOVEMENT.COPY_ID%TYPE
    ,in_CLINET_ID              IN ARCH.MOVEMENT.CLINET_ID%TYPE
    ,in_MOVEMENT_DATE          IN ARCH.MOVEMENT.MOVEMENT_DATE%TYPE
    ,in_PLAN_RETURN_DATE       IN ARCH.MOVEMENT.PLAN_RETURN_DATE%TYPE
    ,in_ACTUAL_RETURN_DATE     IN ARCH.MOVEMENT.ACTUAL_RETURN_DATE%TYPE
    ,in_TAKE_DESCRIPTION       IN ARCH.MOVEMENT.TAKE_DESCRIPTION%TYPE
    ,in_RETURN_DESCRIPTION     IN ARCH.MOVEMENT.RETURN_DESCRIPTION%TYPE
    ,in_DOCUMENT_ID            IN ARCH.MOVEMENT.DOCUMENT_ID%TYPE
    ,in_TAKE_ADDRESS_ID        IN ARCH.MOVEMENT.TAKE_ADDRESS_ID%TYPE
    ,in_RETURN_ADDRESS_ID      IN ARCH.MOVEMENT.RETURN_ADDRESS_ID%TYPE
    );

    PROCEDURE INS_MOVEMENT
    (
     in_COPY_ID                IN ARCH.MOVEMENT.COPY_ID%TYPE
    ,in_CLINET_ID              IN ARCH.MOVEMENT.CLINET_ID%TYPE
    ,in_MOVEMENT_DATE          IN ARCH.MOVEMENT.MOVEMENT_DATE%TYPE
    ,in_PLAN_RETURN_DATE       IN ARCH.MOVEMENT.PLAN_RETURN_DATE%TYPE
    ,in_ACTUAL_RETURN_DATE     IN ARCH.MOVEMENT.ACTUAL_RETURN_DATE%TYPE
    ,in_TAKE_DESCRIPTION       IN ARCH.MOVEMENT.TAKE_DESCRIPTION%TYPE
    ,in_RETURN_DESCRIPTION     IN ARCH.MOVEMENT.RETURN_DESCRIPTION%TYPE
    ,in_DOCUMENT_ID            IN ARCH.MOVEMENT.DOCUMENT_ID%TYPE
    ,in_TAKE_ADDRESS_ID        IN ARCH.MOVEMENT.TAKE_ADDRESS_ID%TYPE
    ,in_RETURN_ADDRESS_ID      IN ARCH.MOVEMENT.RETURN_ADDRESS_ID%TYPE
    );

  PROCEDURE UPD_MOVEMENT
    (
     in_ID                     IN ARCH.MOVEMENT.ID%TYPE
    ,in_COPY_ID                IN ARCH.MOVEMENT.COPY_ID%TYPE
    ,in_CLINET_ID              IN ARCH.MOVEMENT.CLINET_ID%TYPE
    ,in_MOVEMENT_DATE          IN ARCH.MOVEMENT.MOVEMENT_DATE%TYPE
    ,in_PLAN_RETURN_DATE       IN ARCH.MOVEMENT.PLAN_RETURN_DATE%TYPE
    ,in_ACTUAL_RETURN_DATE     IN ARCH.MOVEMENT.ACTUAL_RETURN_DATE%TYPE
    ,in_TAKE_DESCRIPTION       IN ARCH.MOVEMENT.TAKE_DESCRIPTION%TYPE
    ,in_RETURN_DESCRIPTION     IN ARCH.MOVEMENT.RETURN_DESCRIPTION%TYPE
    ,in_DOCUMENT_ID            IN ARCH.MOVEMENT.DOCUMENT_ID%TYPE
    ,in_TAKE_ADDRESS_ID        IN ARCH.MOVEMENT.TAKE_ADDRESS_ID%TYPE
    ,in_RETURN_ADDRESS_ID      IN ARCH.MOVEMENT.RETURN_ADDRESS_ID%TYPE
    );

  PROCEDURE DEL_MOVEMENT
    (
     in_ID                     IN ARCH.MOVEMENT.ID%TYPE
    );

END DML_MOVEMENT;
/

--
-- DML_ROLE_DOCUMENT_ACCESS  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_ROLE_DOCUMENT_ACCESS IS

  PROCEDURE INS_ROLE_DOCUMENT_ACCESS
    (
     in_ROLE_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.ROLE_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.COPY_ID%TYPE
    );

  PROCEDURE INS_ROLE_DOCUMENT_ACCESS_WI
    (
      in_ID                    IN ARCH.ROLE_DOCUMENT_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.ROLE_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.COPY_ID%TYPE
    );

  PROCEDURE UPD_ROLE_DOCUMENT_ACCESS
    (
     in_ID                     IN ARCH.ROLE_DOCUMENT_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.ROLE_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.COPY_ID%TYPE
    );

  PROCEDURE DEL_ROLE_DOCUMENT_ACCESS
    (
     in_ID                     IN ARCH.ROLE_DOCUMENT_ACCESS.ID%TYPE
    );

END DML_ROLE_DOCUMENT_ACCESS;
/

--
-- DML_USER_DOCUMENT_ACCESS  (Package) 
--
CREATE OR REPLACE PACKAGE ARCH.DML_USER_DOCUMENT_ACCESS IS

  PROCEDURE INS_USER_DOCUMENT_ACCESS_WI
    (in_ID                     IN ARCH.USER_DOCUMENT_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_DOCUMENT_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.USER_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.USER_DOCUMENT_ACCESS.COPY_ID%TYPE
    );

  PROCEDURE INS_USER_DOCUMENT_ACCESS
    (in_USER_ID                IN ARCH.USER_DOCUMENT_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.USER_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.USER_DOCUMENT_ACCESS.COPY_ID%TYPE
    );

  PROCEDURE UPD_USER_DOCUMENT_ACCESS
    (
     in_ID                     IN ARCH.USER_DOCUMENT_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_DOCUMENT_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.USER_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.USER_DOCUMENT_ACCESS.COPY_ID%TYPE
    );

  PROCEDURE DEL_USER_DOCUMENT_ACCESS
    (
     in_ID                     IN ARCH.USER_DOCUMENT_ACCESS.ID%TYPE
    );

END DML_USER_DOCUMENT_ACCESS;
/

--
-- DML_ATTRIBUTES_VALUES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_ATTRIBUTES_VALUES IS

  PROCEDURE INS_ATTRIBUTES_VALUES_WI
    (
    in_ID                     IN ARCH.ATTRIBUTES_VALUES.ID%TYPE,
     in_DOCUMENT_ID            IN ARCH.ATTRIBUTES_VALUES.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ATTRIBUTES_VALUES.COPY_ID%TYPE
    ,in_STRING_VALUE           IN ARCH.ATTRIBUTES_VALUES.STRING_VALUE%TYPE
    ,in_DECIMAL_VALUE          IN ARCH.ATTRIBUTES_VALUES.DECIMAL_VALUE%TYPE
    ,in_INT_VALUE              IN ARCH.ATTRIBUTES_VALUES.INT_VALUE%TYPE
    ,in_DATE_VALUE             IN ARCH.ATTRIBUTES_VALUES.DATE_VALUE%TYPE
    ,in_BOOLEAN_VALUE          IN ARCH.ATTRIBUTES_VALUES.BOOLEAN_VALUE%TYPE
    ,in_REFERENCE_VALUE        IN ARCH.ATTRIBUTES_VALUES.REFERENCE_VALUE%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.ATTRIBUTES_VALUES.ATTRIBUTE_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.ATTRIBUTES_VALUES
      (
      ID
       ,DOCUMENT_ID
      ,COPY_ID
      ,STRING_VALUE
      ,DECIMAL_VALUE
      ,INT_VALUE
      ,DATE_VALUE
      ,BOOLEAN_VALUE
      ,REFERENCE_VALUE
      ,ATTRIBUTE_ID
      )
    VALUES
      (
      in_ID
       ,in_DOCUMENT_ID
      ,in_COPY_ID
      ,in_STRING_VALUE
      ,in_DECIMAL_VALUE
      ,in_INT_VALUE
      ,in_DATE_VALUE
      ,in_BOOLEAN_VALUE
      ,in_REFERENCE_VALUE
      ,in_ATTRIBUTE_ID
      );
  END INS_ATTRIBUTES_VALUES_WI;

  PROCEDURE INS_ATTRIBUTES_VALUES
    (
     in_DOCUMENT_ID            IN ARCH.ATTRIBUTES_VALUES.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ATTRIBUTES_VALUES.COPY_ID%TYPE
    ,in_STRING_VALUE           IN ARCH.ATTRIBUTES_VALUES.STRING_VALUE%TYPE
    ,in_DECIMAL_VALUE          IN ARCH.ATTRIBUTES_VALUES.DECIMAL_VALUE%TYPE
    ,in_INT_VALUE              IN ARCH.ATTRIBUTES_VALUES.INT_VALUE%TYPE
    ,in_DATE_VALUE             IN ARCH.ATTRIBUTES_VALUES.DATE_VALUE%TYPE
    ,in_BOOLEAN_VALUE          IN ARCH.ATTRIBUTES_VALUES.BOOLEAN_VALUE%TYPE
    ,in_REFERENCE_VALUE        IN ARCH.ATTRIBUTES_VALUES.REFERENCE_VALUE%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.ATTRIBUTES_VALUES.ATTRIBUTE_ID%TYPE
    ) IS
  BEGIN
    INS_ATTRIBUTES_VALUES_WI(
     ATTRIBUTES_VALUES_SEQ.NEXTVAL
       ,in_DOCUMENT_ID
      ,in_COPY_ID
      ,in_STRING_VALUE
      ,in_DECIMAL_VALUE
      ,in_INT_VALUE
      ,in_DATE_VALUE
      ,in_BOOLEAN_VALUE
      ,in_REFERENCE_VALUE
      ,in_ATTRIBUTE_ID
      );
  END INS_ATTRIBUTES_VALUES;

  PROCEDURE UPD_ATTRIBUTES_VALUES
    (
     in_ID                     IN ARCH.ATTRIBUTES_VALUES.ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.ATTRIBUTES_VALUES.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ATTRIBUTES_VALUES.COPY_ID%TYPE
    ,in_STRING_VALUE           IN ARCH.ATTRIBUTES_VALUES.STRING_VALUE%TYPE
    ,in_DECIMAL_VALUE          IN ARCH.ATTRIBUTES_VALUES.DECIMAL_VALUE%TYPE
    ,in_INT_VALUE              IN ARCH.ATTRIBUTES_VALUES.INT_VALUE%TYPE
    ,in_DATE_VALUE             IN ARCH.ATTRIBUTES_VALUES.DATE_VALUE%TYPE
    ,in_BOOLEAN_VALUE          IN ARCH.ATTRIBUTES_VALUES.BOOLEAN_VALUE%TYPE
    ,in_REFERENCE_VALUE        IN ARCH.ATTRIBUTES_VALUES.REFERENCE_VALUE%TYPE
    ,in_ATTRIBUTE_ID           IN ARCH.ATTRIBUTES_VALUES.ATTRIBUTE_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.ATTRIBUTES_VALUES
    SET 
        DOCUMENT_ID              = in_DOCUMENT_ID
       ,COPY_ID                  = in_COPY_ID
       ,STRING_VALUE             = in_STRING_VALUE
       ,DECIMAL_VALUE            = in_DECIMAL_VALUE
       ,INT_VALUE                = in_INT_VALUE
       ,DATE_VALUE               = in_DATE_VALUE
       ,BOOLEAN_VALUE            = in_BOOLEAN_VALUE
       ,REFERENCE_VALUE          = in_REFERENCE_VALUE
       ,ATTRIBUTE_ID             = in_ATTRIBUTE_ID
    WHERE
        ID                       = in_ID;
  END UPD_ATTRIBUTES_VALUES;

  PROCEDURE DEL_ATTRIBUTES_VALUES
    (
     in_ID                     IN ARCH.ATTRIBUTES_VALUES.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.ATTRIBUTES_VALUES
    WHERE
        ID                       = in_ID;
  END DEL_ATTRIBUTES_VALUES;

END DML_ATTRIBUTES_VALUES;
/

--
-- DML_DOCUMENT_HISTORY  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_DOCUMENT_HISTORY IS

  PROCEDURE INS_DOCUMENT_HISTORY_wi
    (
    in_ID                     IN ARCH.DOCUMENT_HISTORY.ID%TYPE,
     in_DOCUMENT_ID            IN ARCH.DOCUMENT_HISTORY.DOCUMENT_ID%TYPE
    ,in_USER_ID                IN ARCH.DOCUMENT_HISTORY.USER_ID%TYPE
    ,in_COPY_ID                IN ARCH.DOCUMENT_HISTORY.COPY_ID%TYPE
    ,in_ACTION                 IN ARCH.DOCUMENT_HISTORY.ACTION%TYPE
    ,in_ACTION_DATE            IN ARCH.DOCUMENT_HISTORY.ACTION_DATE%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.DOCUMENT_HISTORY
      (id,
       DOCUMENT_ID
      ,USER_ID
      ,COPY_ID
      ,ACTION
      ,ACTION_DATE
      )
    VALUES
      (in_id,
       in_DOCUMENT_ID
      ,in_USER_ID
      ,in_COPY_ID
      ,in_ACTION
      ,in_ACTION_DATE
      );
  END INS_DOCUMENT_HISTORY_wi;

  PROCEDURE INS_DOCUMENT_HISTORY
    (
     in_DOCUMENT_ID            IN ARCH.DOCUMENT_HISTORY.DOCUMENT_ID%TYPE
    ,in_USER_ID                IN ARCH.DOCUMENT_HISTORY.USER_ID%TYPE
    ,in_COPY_ID                IN ARCH.DOCUMENT_HISTORY.COPY_ID%TYPE
    ,in_ACTION                 IN ARCH.DOCUMENT_HISTORY.ACTION%TYPE
    ,in_ACTION_DATE            IN ARCH.DOCUMENT_HISTORY.ACTION_DATE%TYPE
    ) IS
  BEGIN
    INS_DOCUMENT_HISTORY_wi(
     DOCUMENT_HISTORY_SEQ.NEXTVAL,
       in_DOCUMENT_ID
      ,in_USER_ID
      ,in_COPY_ID
      ,in_ACTION
      ,in_ACTION_DATE
      );
  END INS_DOCUMENT_HISTORY;

  PROCEDURE UPD_DOCUMENT_HISTORY
    (
     in_ID                     IN ARCH.DOCUMENT_HISTORY.ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.DOCUMENT_HISTORY.DOCUMENT_ID%TYPE
    ,in_USER_ID                IN ARCH.DOCUMENT_HISTORY.USER_ID%TYPE
    ,in_COPY_ID                IN ARCH.DOCUMENT_HISTORY.COPY_ID%TYPE
    ,in_ACTION                 IN ARCH.DOCUMENT_HISTORY.ACTION%TYPE
    ,in_ACTION_DATE            IN ARCH.DOCUMENT_HISTORY.ACTION_DATE%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.DOCUMENT_HISTORY
    SET 
        DOCUMENT_ID              = in_DOCUMENT_ID
       ,USER_ID                  = in_USER_ID
       ,COPY_ID                  = in_COPY_ID
       ,ACTION                   = in_ACTION
       ,ACTION_DATE              = in_ACTION_DATE
    WHERE
        ID                       = in_ID;
  END UPD_DOCUMENT_HISTORY;

  PROCEDURE DEL_DOCUMENT_HISTORY
    (
     in_ID                     IN ARCH.DOCUMENT_HISTORY.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.DOCUMENT_HISTORY
    WHERE
        ID                       = in_ID;
  END DEL_DOCUMENT_HISTORY;

END DML_DOCUMENT_HISTORY;
/

--
-- DML_MOVEMENT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_MOVEMENT IS

  PROCEDURE INS_MOVEMENT_WI
    (
     in_ID                     IN ARCH.MOVEMENT.ID%TYPE
    ,in_COPY_ID                IN ARCH.MOVEMENT.COPY_ID%TYPE
    ,in_CLINET_ID              IN ARCH.MOVEMENT.CLINET_ID%TYPE
    ,in_MOVEMENT_DATE          IN ARCH.MOVEMENT.MOVEMENT_DATE%TYPE
    ,in_PLAN_RETURN_DATE       IN ARCH.MOVEMENT.PLAN_RETURN_DATE%TYPE
    ,in_ACTUAL_RETURN_DATE     IN ARCH.MOVEMENT.ACTUAL_RETURN_DATE%TYPE
    ,in_TAKE_DESCRIPTION       IN ARCH.MOVEMENT.TAKE_DESCRIPTION%TYPE
    ,in_RETURN_DESCRIPTION     IN ARCH.MOVEMENT.RETURN_DESCRIPTION%TYPE
    ,in_DOCUMENT_ID            IN ARCH.MOVEMENT.DOCUMENT_ID%TYPE
    ,in_TAKE_ADDRESS_ID        IN ARCH.MOVEMENT.TAKE_ADDRESS_ID%TYPE
    ,in_RETURN_ADDRESS_ID      IN ARCH.MOVEMENT.RETURN_ADDRESS_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.MOVEMENT
      (
       ID
      ,COPY_ID
      ,CLINET_ID
      ,MOVEMENT_DATE
      ,PLAN_RETURN_DATE
      ,ACTUAL_RETURN_DATE
      ,TAKE_DESCRIPTION
      ,RETURN_DESCRIPTION
      ,DOCUMENT_ID
      ,TAKE_ADDRESS_ID
      ,RETURN_ADDRESS_ID
      )
    VALUES
      (
       in_ID
      ,in_COPY_ID
      ,in_CLINET_ID
      ,in_MOVEMENT_DATE
      ,in_PLAN_RETURN_DATE
      ,in_ACTUAL_RETURN_DATE
      ,in_TAKE_DESCRIPTION
      ,in_RETURN_DESCRIPTION
      ,in_DOCUMENT_ID
      ,in_TAKE_ADDRESS_ID
      ,in_RETURN_ADDRESS_ID
      );
  END INS_MOVEMENT_WI;

  PROCEDURE INS_MOVEMENT
    (
     in_COPY_ID                IN ARCH.MOVEMENT.COPY_ID%TYPE
    ,in_CLINET_ID              IN ARCH.MOVEMENT.CLINET_ID%TYPE
    ,in_MOVEMENT_DATE          IN ARCH.MOVEMENT.MOVEMENT_DATE%TYPE
    ,in_PLAN_RETURN_DATE       IN ARCH.MOVEMENT.PLAN_RETURN_DATE%TYPE
    ,in_ACTUAL_RETURN_DATE     IN ARCH.MOVEMENT.ACTUAL_RETURN_DATE%TYPE
    ,in_TAKE_DESCRIPTION       IN ARCH.MOVEMENT.TAKE_DESCRIPTION%TYPE
    ,in_RETURN_DESCRIPTION     IN ARCH.MOVEMENT.RETURN_DESCRIPTION%TYPE
    ,in_DOCUMENT_ID            IN ARCH.MOVEMENT.DOCUMENT_ID%TYPE
    ,in_TAKE_ADDRESS_ID        IN ARCH.MOVEMENT.TAKE_ADDRESS_ID%TYPE
    ,in_RETURN_ADDRESS_ID      IN ARCH.MOVEMENT.RETURN_ADDRESS_ID%TYPE
    ) IS
  BEGIN
    INS_MOVEMENT_WI(
       MOVEMENT_SEQ.NEXTVAL
      ,in_COPY_ID
      ,in_CLINET_ID
      ,in_MOVEMENT_DATE
      ,in_PLAN_RETURN_DATE
      ,in_ACTUAL_RETURN_DATE
      ,in_TAKE_DESCRIPTION
      ,in_RETURN_DESCRIPTION
      ,in_DOCUMENT_ID
      ,in_TAKE_ADDRESS_ID
      ,in_RETURN_ADDRESS_ID
      );
  END INS_MOVEMENT;

  PROCEDURE UPD_MOVEMENT
    (
     in_ID                     IN ARCH.MOVEMENT.ID%TYPE
    ,in_COPY_ID                IN ARCH.MOVEMENT.COPY_ID%TYPE
    ,in_CLINET_ID              IN ARCH.MOVEMENT.CLINET_ID%TYPE
    ,in_MOVEMENT_DATE          IN ARCH.MOVEMENT.MOVEMENT_DATE%TYPE
    ,in_PLAN_RETURN_DATE       IN ARCH.MOVEMENT.PLAN_RETURN_DATE%TYPE
    ,in_ACTUAL_RETURN_DATE     IN ARCH.MOVEMENT.ACTUAL_RETURN_DATE%TYPE
    ,in_TAKE_DESCRIPTION       IN ARCH.MOVEMENT.TAKE_DESCRIPTION%TYPE
    ,in_RETURN_DESCRIPTION     IN ARCH.MOVEMENT.RETURN_DESCRIPTION%TYPE
    ,in_DOCUMENT_ID            IN ARCH.MOVEMENT.DOCUMENT_ID%TYPE
    ,in_TAKE_ADDRESS_ID        IN ARCH.MOVEMENT.TAKE_ADDRESS_ID%TYPE
    ,in_RETURN_ADDRESS_ID      IN ARCH.MOVEMENT.RETURN_ADDRESS_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.MOVEMENT
    SET 
        COPY_ID                  = in_COPY_ID
       ,CLINET_ID                = in_CLINET_ID
       ,MOVEMENT_DATE            = in_MOVEMENT_DATE
       ,PLAN_RETURN_DATE         = in_PLAN_RETURN_DATE
       ,ACTUAL_RETURN_DATE       = in_ACTUAL_RETURN_DATE
       ,TAKE_DESCRIPTION         = in_TAKE_DESCRIPTION
       ,RETURN_DESCRIPTION       = in_RETURN_DESCRIPTION
       ,DOCUMENT_ID              = in_DOCUMENT_ID
       ,TAKE_ADDRESS_ID          = in_TAKE_ADDRESS_ID
       ,RETURN_ADDRESS_ID        = in_RETURN_ADDRESS_ID
    WHERE
        ID                       = in_ID;
  END UPD_MOVEMENT;

  PROCEDURE DEL_MOVEMENT
    (
     in_ID                     IN ARCH.MOVEMENT.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.MOVEMENT
    WHERE
        ID                       = in_ID;
  END DEL_MOVEMENT;

END DML_MOVEMENT;
/

--
-- DML_ROLE_DOCUMENT_ACCESS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_ROLE_DOCUMENT_ACCESS IS

  PROCEDURE INS_ROLE_DOCUMENT_ACCESS_WI
    (
     in_ID                    IN ARCH.ROLE_DOCUMENT_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.ROLE_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.COPY_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.ROLE_DOCUMENT_ACCESS
      (
       ID
      ,ROLE_ID
      ,DOCUMENT_ID
      ,COPY_ID
      )
    VALUES
      (
       in_ID
      ,in_ROLE_ID
      ,in_DOCUMENT_ID
      ,in_COPY_ID
      );
  END INS_ROLE_DOCUMENT_ACCESS_WI;

PROCEDURE INS_ROLE_DOCUMENT_ACCESS
    (
     in_ROLE_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.ROLE_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.COPY_ID%TYPE
    ) IS
  BEGIN
    INS_ROLE_DOCUMENT_ACCESS_WI(
       ROLE_DOCUMENT_ACCESS_SEQ.NEXTVAL
      ,in_ROLE_ID
      ,in_DOCUMENT_ID
      ,in_COPY_ID
      );
  END INS_ROLE_DOCUMENT_ACCESS;

  PROCEDURE UPD_ROLE_DOCUMENT_ACCESS
    (
     in_ID                     IN ARCH.ROLE_DOCUMENT_ACCESS.ID%TYPE
    ,in_ROLE_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.ROLE_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.ROLE_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.ROLE_DOCUMENT_ACCESS.COPY_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.ROLE_DOCUMENT_ACCESS
    SET 
        ROLE_ID                  = in_ROLE_ID
       ,DOCUMENT_ID              = in_DOCUMENT_ID
       ,COPY_ID                  = in_COPY_ID
    WHERE
        ID                       = in_ID;
  END UPD_ROLE_DOCUMENT_ACCESS;

  PROCEDURE DEL_ROLE_DOCUMENT_ACCESS
    (
     in_ID                     IN ARCH.ROLE_DOCUMENT_ACCESS.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.ROLE_DOCUMENT_ACCESS
    WHERE
        ID                       = in_ID;
  END DEL_ROLE_DOCUMENT_ACCESS;

END DML_ROLE_DOCUMENT_ACCESS;
/

--
-- DML_USER_DOCUMENT_ACCESS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY ARCH.DML_USER_DOCUMENT_ACCESS IS

  PROCEDURE INS_USER_DOCUMENT_ACCESS_WI
    (
     in_ID                     IN ARCH.USER_DOCUMENT_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_DOCUMENT_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.USER_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.USER_DOCUMENT_ACCESS.COPY_ID%TYPE
    ) IS
  BEGIN
    INSERT INTO ARCH.USER_DOCUMENT_ACCESS
      (
       ID
      ,USER_ID
      ,DOCUMENT_ID
      ,COPY_ID
      )
    VALUES
      (
       in_ID
      ,in_USER_ID
      ,in_DOCUMENT_ID
      ,in_COPY_ID
      );
  END INS_USER_DOCUMENT_ACCESS_WI;

   PROCEDURE INS_USER_DOCUMENT_ACCESS
    (
     in_USER_ID                IN ARCH.USER_DOCUMENT_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.USER_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.USER_DOCUMENT_ACCESS.COPY_ID%TYPE
    ) IS
  BEGIN
    INS_USER_DOCUMENT_ACCESS_WI(
       USER_DOCUMENT_ACCESS_SEQ.NEXTVAL
      ,in_USER_ID
      ,in_DOCUMENT_ID
      ,in_COPY_ID
      );
  END INS_USER_DOCUMENT_ACCESS;
 

  PROCEDURE UPD_USER_DOCUMENT_ACCESS
    (
     in_ID                     IN ARCH.USER_DOCUMENT_ACCESS.ID%TYPE
    ,in_USER_ID                IN ARCH.USER_DOCUMENT_ACCESS.USER_ID%TYPE
    ,in_DOCUMENT_ID            IN ARCH.USER_DOCUMENT_ACCESS.DOCUMENT_ID%TYPE
    ,in_COPY_ID                IN ARCH.USER_DOCUMENT_ACCESS.COPY_ID%TYPE
    ) IS
  BEGIN
    UPDATE ARCH.USER_DOCUMENT_ACCESS
    SET 
        USER_ID                  = in_USER_ID
       ,DOCUMENT_ID              = in_DOCUMENT_ID
       ,COPY_ID                  = in_COPY_ID
    WHERE
        ID                       = in_ID;
  END UPD_USER_DOCUMENT_ACCESS;

  PROCEDURE DEL_USER_DOCUMENT_ACCESS
    (
     in_ID                     IN ARCH.USER_DOCUMENT_ACCESS.ID%TYPE
    ) IS
  BEGIN
    DELETE FROM ARCH.USER_DOCUMENT_ACCESS
    WHERE
        ID                       = in_ID;
  END DEL_USER_DOCUMENT_ACCESS;

END DML_USER_DOCUMENT_ACCESS;
/

--
-- DOCUMENT_HISTORY_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.DOCUMENT_HISTORY_TRG 
BEFORE INSERT ON ARCH.DOCUMENT_HISTORY 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT DOCUMENT_HISTORY_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- MOVEMENT_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.MOVEMENT_TRG 
BEFORE INSERT ON ARCH.MOVEMENT 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT MOVEMENT_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- ROLE_DOCUMENT_ACCESS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ROLE_DOCUMENT_ACCESS_TRG 
BEFORE INSERT ON ARCH.ROLE_DOCUMENT_ACCESS 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT ROLE_DOCUMENT_ACCESS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- USER_DOCUMENT_ACCESS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.USER_DOCUMENT_ACCESS_TRG 
BEFORE INSERT ON ARCH.USER_DOCUMENT_ACCESS 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT USER_DOCUMENT_ACCESS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- ATTRIBUTES_VALUES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ATTRIBUTES_VALUES_TRG 
BEFORE INSERT ON ARCH.ATTRIBUTES_VALUES 
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT ATTRIBUTES_VALUES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--
-- ATTRIBUTES_VALUES_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ATTRIBUTES_VALUES_AUD
BEFORE INSERT OR UPDATE
ON ARCH.ATTRIBUTES_VALUES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END ATTRIBUTES_VALUES_AUD;
/


--
-- DOCUMENT_HISTORY_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.DOCUMENT_HISTORY_AUD
BEFORE INSERT OR UPDATE
ON ARCH.DOCUMENT_HISTORY
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END DOCUMENT_HISTORY_AUD;
/


--
-- MOVEMENT_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.MOVEMENT_AUD
BEFORE INSERT OR UPDATE
ON ARCH.MOVEMENT
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END MOVEMENT_AUD;
/


--
-- ROLE_DOCUMENT_ACCESS_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.ROLE_DOCUMENT_ACCESS_AUD
BEFORE INSERT OR UPDATE
ON ARCH.ROLE_DOCUMENT_ACCESS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END ROLE_DOCUMENT_ACCESS_AUD;
/


--
-- USER_DOCUMENT_ACCESS_AUD  (Trigger) 
--
CREATE OR REPLACE TRIGGER ARCH.USER_DOCUMENT_ACCESS_AUD
BEFORE INSERT OR UPDATE
ON ARCH.USER_DOCUMENT_ACCESS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   AUD_USER_ID NUMBER;
   AUD_TIME date;
   AUD_OS_USER nvarchar2(500);
   AUD_HOST nvarchar2(500);
   AUD_APPLICATION nvarchar2(500);
BEGIN
    GET_AUDIT(AUD_USER_ID,AUD_TIME,AUD_OS_USER,AUD_HOST,AUD_APPLICATION);

    if inserting then
        :NEW.AUD_CREATE_USER_ID := AUD_USER_ID;
        :NEW.AUD_CREATE_TIME := AUD_TIME;
        :NEW.AUD_CREATE_OS_USER := AUD_OS_USER;
        :NEW.AUD_CREATE_HOST := AUD_HOST;
        :NEW.AUD_CREATE_APPLICATION := AUD_APPLICATION;
    end if;    
   
   :NEW.AUD_MODIFY_USER_ID := AUD_USER_ID;   
   :NEW.AUD_MODIFY_TIME := AUD_TIME;   
   :NEW.AUD_MODIFY_OS_USER := AUD_OS_USER;   
   :NEW.AUD_MODIFY_HOST := AUD_HOST;   
   :NEW.AUD_MODIFY_APPLICATION := AUD_APPLICATION;
   
END USER_DOCUMENT_ACCESS_AUD;
/


-- 
-- Non Foreign Key Constraints for Table USERS 
-- 
ALTER TABLE ARCH.USERS ADD (
  CONSTRAINT USERS_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.USERS_PK
  ENABLE VALIDATE);

ALTER TABLE ARCH.USERS ADD (
  CONSTRAINT USERS_UK1
  UNIQUE (NAME)
  USING INDEX ARCH.USERS_UK1
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REFERENCE_TYPES 
-- 
ALTER TABLE ARCH.REFERENCE_TYPES ADD (
  CONSTRAINT REFERENCE_TYPES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.REFERENCE_TYPES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table CLIENTS 
-- 
ALTER TABLE ARCH.CLIENTS ADD (
  CONSTRAINT CLIENTS_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.CLIENTS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ADDRESS_DICTIONARY 
-- 
ALTER TABLE ARCH.ADDRESS_DICTIONARY ADD (
  CONSTRAINT ADDRESS_DICTIONARY_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.ADDRESS_DICTIONARY_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DOCUMENT_TYPES 
-- 
ALTER TABLE ARCH.DOCUMENT_TYPES ADD (
  CONSTRAINT DOCUMENT_TYPES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.DOCUMENT_TYPES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ATTRIBUTES 
-- 
ALTER TABLE ARCH.ATTRIBUTES ADD (
  CONSTRAINT ATTRIBUTES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.ATTRIBUTES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DOCUMENT_TYPE_ATTRIBUTES 
-- 
ALTER TABLE ARCH.DOCUMENT_TYPE_ATTRIBUTES ADD (
  CONSTRAINT DOCUMENT_TYPE_ATTRIBUTES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.DOCUMENT_TYPE_ATTRIBUTES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ROLES 
-- 
ALTER TABLE ARCH.ROLES ADD (
  CONSTRAINT ROLES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.ROLES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table REFERENCES 
-- 
ALTER TABLE ARCH.REFERENCES ADD (
  CONSTRAINT REFERENCES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.REFERENCES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DOCUMENTS 
-- 
ALTER TABLE ARCH.DOCUMENTS ADD (
  CONSTRAINT DOCUMENTS_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.DOCUMENTS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ROLE_CLIENT_ACCESS 
-- 
ALTER TABLE ARCH.ROLE_CLIENT_ACCESS ADD (
  CONSTRAINT ROLE_CLIENT_ACCESS_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.ROLE_CLIENT_ACCESS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table USER_CLIENT_ACCESS 
-- 
ALTER TABLE ARCH.USER_CLIENT_ACCESS ADD (
  CONSTRAINT USER_CLIENT_ACCESS_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.USER_CLIENT_ACCESS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table COPY_TYPES 
-- 
ALTER TABLE ARCH.COPY_TYPES ADD (
  CONSTRAINT COPY_TYPES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.COPY_TYPES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table COPY_TYPE_ATTRIBUTES 
-- 
ALTER TABLE ARCH.COPY_TYPE_ATTRIBUTES ADD (
  CONSTRAINT COPY_TYPE_ATTRIBUTES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.COPY_TYPE_ATTRIBUTES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table USER_DOC_TYPE_ACCESS 
-- 
ALTER TABLE ARCH.USER_DOC_TYPE_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_TYPE_ACCESS_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.USER_DOCUMENT_TYPE_ACCESS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table USER_ROLES 
-- 
ALTER TABLE ARCH.USER_ROLES ADD (
  CONSTRAINT USER_ROLES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.USER_ROLES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ROLE_DOC_TYPE_ACCESS 
-- 
ALTER TABLE ARCH.ROLE_DOC_TYPE_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_TYPE_ACCESS_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.ROLE_DOCUMENT_TYPE_ACCESS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table COPIES 
-- 
ALTER TABLE ARCH.COPIES ADD (
  CONSTRAINT COPIES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.COPIES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table MOVEMENT 
-- 
ALTER TABLE ARCH.MOVEMENT ADD (
  CONSTRAINT MOVEMENT_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.MOVEMENT_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ATTRIBUTES_VALUES 
-- 
ALTER TABLE ARCH.ATTRIBUTES_VALUES ADD (
  CONSTRAINT ATTRIBUTES_VALUES_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.ATTRIBUTES_VALUES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table USER_DOCUMENT_ACCESS 
-- 
ALTER TABLE ARCH.USER_DOCUMENT_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_ACCESS_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.USER_DOCUMENT_ACCESS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table ROLE_DOCUMENT_ACCESS 
-- 
ALTER TABLE ARCH.ROLE_DOCUMENT_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_ACCESS_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.ROLE_DOCUMENT_ACCESS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table DOCUMENT_HISTORY 
-- 
ALTER TABLE ARCH.DOCUMENT_HISTORY ADD (
  CONSTRAINT DOCUMENT_HISTORY_PK
  PRIMARY KEY
  (ID)
  USING INDEX ARCH.DOCUMENT_HISTORY_PK
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table USERS 
-- 
ALTER TABLE ARCH.USERS ADD (
  CONSTRAINT USERS_FK1 
  FOREIGN KEY (AUD_CREATE_USER_NAME) 
  REFERENCES ARCH.USERS (NAME)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USERS ADD (
  CONSTRAINT USERS_FK2 
  FOREIGN KEY (AUD_MODIFY_USER_NAME) 
  REFERENCES ARCH.USERS (NAME)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table REFERENCE_TYPES 
-- 
ALTER TABLE ARCH.REFERENCE_TYPES ADD (
  CONSTRAINT REFERENCE_TYPES_FK1 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.REFERENCE_TYPES ADD (
  CONSTRAINT REFERENCE_TYPES_FK2 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table CLIENTS 
-- 
ALTER TABLE ARCH.CLIENTS ADD (
  CONSTRAINT CLIENTS_FK1 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.CLIENTS ADD (
  CONSTRAINT CLIENTS_FK2 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table ADDRESS_DICTIONARY 
-- 
ALTER TABLE ARCH.ADDRESS_DICTIONARY ADD (
  CONSTRAINT ADDRESS_DICTIONARY_FK2 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ADDRESS_DICTIONARY ADD (
  CONSTRAINT ADDRESS_DICTIONARY_FK3 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ADDRESS_DICTIONARY ADD (
  CONSTRAINT ADDRESS_DICTIONARY_FK1 
  FOREIGN KEY (PARENT_ID) 
  REFERENCES ARCH.ADDRESS_DICTIONARY (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table DOCUMENT_TYPES 
-- 
ALTER TABLE ARCH.DOCUMENT_TYPES ADD (
  CONSTRAINT DOCUMENT_TYPES_FK2 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENT_TYPES ADD (
  CONSTRAINT DOCUMENT_TYPES_FK3 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENT_TYPES ADD (
  CONSTRAINT DOCUMENT_TYPES_FK1 
  FOREIGN KEY (PARENT_ID) 
  REFERENCES ARCH.DOCUMENT_TYPES (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table ATTRIBUTES 
-- 
ALTER TABLE ARCH.ATTRIBUTES ADD (
  CONSTRAINT ATTRIBUTES_R01 
  FOREIGN KEY (REFERENCE_TYPE_ID) 
  REFERENCES ARCH.REFERENCE_TYPES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ATTRIBUTES ADD (
  CONSTRAINT ATTRIBUTES_FK2 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ATTRIBUTES ADD (
  CONSTRAINT ATTRIBUTES_FK3 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table DOCUMENT_TYPE_ATTRIBUTES 
-- 
ALTER TABLE ARCH.DOCUMENT_TYPE_ATTRIBUTES ADD (
  CONSTRAINT DOCUMENT_TYPE_ATTRIBUTES_FK3 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENT_TYPE_ATTRIBUTES ADD (
  CONSTRAINT DOCUMENT_TYPE_ATTRIBUTES_FK4 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENT_TYPE_ATTRIBUTES ADD (
  CONSTRAINT DOCUMENT_TYPE_ATTRIBUTES_FK2 
  FOREIGN KEY (ATTRIBUTE_ID) 
  REFERENCES ARCH.ATTRIBUTES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENT_TYPE_ATTRIBUTES ADD (
  CONSTRAINT DOCUMENT_TYPE_ATTRIBUTES_FK1 
  FOREIGN KEY (DOCUMENT_TYPE_ID) 
  REFERENCES ARCH.DOCUMENT_TYPES (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table ROLES 
-- 
ALTER TABLE ARCH.ROLES ADD (
  CONSTRAINT ROLES_FK1 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLES ADD (
  CONSTRAINT ROLES_FK2 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table REFERENCES 
-- 
ALTER TABLE ARCH.REFERENCES ADD (
  CONSTRAINT REFERENCES_FK1 
  FOREIGN KEY (REFENCE_TYPE_ID) 
  REFERENCES ARCH.REFERENCE_TYPES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.REFERENCES ADD (
  CONSTRAINT REFERENCES_FK2 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.REFERENCES ADD (
  CONSTRAINT REFERENCES_FK3 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table DOCUMENTS 
-- 
ALTER TABLE ARCH.DOCUMENTS ADD (
  CONSTRAINT DOCUMENTS_FK4 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENTS ADD (
  CONSTRAINT DOCUMENTS_FK5 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENTS ADD (
  CONSTRAINT DOCUMENTS_FK3 
  FOREIGN KEY (DOCUMENT_TYPE_ID) 
  REFERENCES ARCH.DOCUMENT_TYPES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENTS ADD (
  CONSTRAINT DOCUMENTS_FK2 
  FOREIGN KEY (ADDRESS_ID) 
  REFERENCES ARCH.ADDRESS_DICTIONARY (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENTS ADD (
  CONSTRAINT DOCUMENTS_FK1 
  FOREIGN KEY (CLIENT_ID) 
  REFERENCES ARCH.CLIENTS (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table ROLE_CLIENT_ACCESS 
-- 
ALTER TABLE ARCH.ROLE_CLIENT_ACCESS ADD (
  CONSTRAINT ROLE_CLIENT_ACCESS_FK3 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_CLIENT_ACCESS ADD (
  CONSTRAINT ROLE_CLIENT_ACCESS_FK4 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_CLIENT_ACCESS ADD (
  CONSTRAINT ROLE_CLIENT_ACCESS_FK2 
  FOREIGN KEY (ROLE_ID) 
  REFERENCES ARCH.ROLES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_CLIENT_ACCESS ADD (
  CONSTRAINT ROLE_CLIENT_ACCESS_FK1 
  FOREIGN KEY (CLIENT_ID) 
  REFERENCES ARCH.CLIENTS (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table USER_CLIENT_ACCESS 
-- 
ALTER TABLE ARCH.USER_CLIENT_ACCESS ADD (
  CONSTRAINT USER_CLIENT_ACCESS_FK2 
  FOREIGN KEY (USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_CLIENT_ACCESS ADD (
  CONSTRAINT USER_CLIENT_ACCESS_FK3 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_CLIENT_ACCESS ADD (
  CONSTRAINT USER_CLIENT_ACCESS_FK4 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_CLIENT_ACCESS ADD (
  CONSTRAINT USER_CLIENT_ACCESS_FK1 
  FOREIGN KEY (CLIENT_ID) 
  REFERENCES ARCH.CLIENTS (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table COPY_TYPES 
-- 
ALTER TABLE ARCH.COPY_TYPES ADD (
  CONSTRAINT COPY_TYPES_FK2 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.COPY_TYPES ADD (
  CONSTRAINT COPY_TYPES_FK3 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.COPY_TYPES ADD (
  CONSTRAINT COPY_TYPES_FK1 
  FOREIGN KEY (DOCUMENT_TYPE_ID) 
  REFERENCES ARCH.DOCUMENT_TYPES (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table COPY_TYPE_ATTRIBUTES 
-- 
ALTER TABLE ARCH.COPY_TYPE_ATTRIBUTES ADD (
  CONSTRAINT COPY_TYPE_ATTRIBUTES_FK3 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.COPY_TYPE_ATTRIBUTES ADD (
  CONSTRAINT COPY_TYPE_ATTRIBUTES_FK4 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.COPY_TYPE_ATTRIBUTES ADD (
  CONSTRAINT COPY_TYPE_ATTRIBUTES_FK2 
  FOREIGN KEY (ATTRIBUTE_ID) 
  REFERENCES ARCH.ATTRIBUTES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.COPY_TYPE_ATTRIBUTES ADD (
  CONSTRAINT COPY_TYPE_ATTRIBUTES_FK1 
  FOREIGN KEY (COPY_TYPE_ID) 
  REFERENCES ARCH.COPY_TYPES (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table USER_DOC_TYPE_ACCESS 
-- 
ALTER TABLE ARCH.USER_DOC_TYPE_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_TYPE_ACCESS_FK3 
  FOREIGN KEY (USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_DOC_TYPE_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_TYPE_ACCESS_FK4 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_DOC_TYPE_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_TYPE_ACCESS_FK5 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_DOC_TYPE_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_TYPE_ACCESS_FK2 
  FOREIGN KEY (DOCUMENT_TYPE_ID) 
  REFERENCES ARCH.DOCUMENT_TYPES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_DOC_TYPE_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_TYPE_ACCESS_FK1 
  FOREIGN KEY (COPY_TYPE_ID) 
  REFERENCES ARCH.COPY_TYPES (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table USER_ROLES 
-- 
ALTER TABLE ARCH.USER_ROLES ADD (
  CONSTRAINT USER_ROLES_FK2 
  FOREIGN KEY (USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_ROLES ADD (
  CONSTRAINT USER_ROLES_FK3 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_ROLES ADD (
  CONSTRAINT USER_ROLES_FK4 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_ROLES ADD (
  CONSTRAINT USER_ROLES_FK1 
  FOREIGN KEY (ROLE_ID) 
  REFERENCES ARCH.ROLES (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table ROLE_DOC_TYPE_ACCESS 
-- 
ALTER TABLE ARCH.ROLE_DOC_TYPE_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_TYPE_ACCESS_FK4 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_DOC_TYPE_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_TYPE_ACCESS_FK5 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_DOC_TYPE_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_TYPE_ACCESS_FK3 
  FOREIGN KEY (ROLE_ID) 
  REFERENCES ARCH.ROLES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_DOC_TYPE_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_TYPE_ACCESS_FK1 
  FOREIGN KEY (DOCUMENT_TYPE_ID) 
  REFERENCES ARCH.DOCUMENT_TYPES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_DOC_TYPE_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_TYPE_ACCESS_FK2 
  FOREIGN KEY (COPY_TYPE_ID) 
  REFERENCES ARCH.COPY_TYPES (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table COPIES 
-- 
ALTER TABLE ARCH.COPIES ADD (
  CONSTRAINT COPIES_FK2 
  FOREIGN KEY (DOCUMENT_ID) 
  REFERENCES ARCH.DOCUMENTS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.COPIES ADD (
  CONSTRAINT COPIES_FK3 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.COPIES ADD (
  CONSTRAINT COPIES_FK4 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.COPIES ADD (
  CONSTRAINT COPIES_FK1 
  FOREIGN KEY (COPY_TYPE_ID) 
  REFERENCES ARCH.COPY_TYPES (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table MOVEMENT 
-- 
ALTER TABLE ARCH.MOVEMENT ADD (
  CONSTRAINT MOVEMENT_FK2 
  FOREIGN KEY (COPY_ID) 
  REFERENCES ARCH.COPIES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.MOVEMENT ADD (
  CONSTRAINT MOVEMENT_FK3 
  FOREIGN KEY (DOCUMENT_ID) 
  REFERENCES ARCH.DOCUMENTS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.MOVEMENT ADD (
  CONSTRAINT MOVEMENT_FK6 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.MOVEMENT ADD (
  CONSTRAINT MOVEMENT_FK7 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.MOVEMENT ADD (
  CONSTRAINT MOVEMENT_FK4 
  FOREIGN KEY (TAKE_ADDRESS_ID) 
  REFERENCES ARCH.ADDRESS_DICTIONARY (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.MOVEMENT ADD (
  CONSTRAINT MOVEMENT_FK5 
  FOREIGN KEY (RETURN_ADDRESS_ID) 
  REFERENCES ARCH.ADDRESS_DICTIONARY (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.MOVEMENT ADD (
  CONSTRAINT MOVEMENT_FK1 
  FOREIGN KEY (CLINET_ID) 
  REFERENCES ARCH.CLIENTS (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table ATTRIBUTES_VALUES 
-- 
ALTER TABLE ARCH.ATTRIBUTES_VALUES ADD (
  CONSTRAINT ATTRIBUTES_VALUES_FK2 
  FOREIGN KEY (COPY_ID) 
  REFERENCES ARCH.COPIES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ATTRIBUTES_VALUES ADD (
  CONSTRAINT ATTRIBUTES_VALUES_FK3 
  FOREIGN KEY (DOCUMENT_ID) 
  REFERENCES ARCH.DOCUMENTS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ATTRIBUTES_VALUES ADD (
  CONSTRAINT ATTRIBUTES_VALUES_FK4 
  FOREIGN KEY (REFERENCE_VALUE) 
  REFERENCES ARCH.REFERENCES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ATTRIBUTES_VALUES ADD (
  CONSTRAINT ATTRIBUTES_VALUES_FK5 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ATTRIBUTES_VALUES ADD (
  CONSTRAINT ATTRIBUTES_VALUES_FK6 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ATTRIBUTES_VALUES ADD (
  CONSTRAINT ATTRIBUTES_VALUES_FK1 
  FOREIGN KEY (ATTRIBUTE_ID) 
  REFERENCES ARCH.ATTRIBUTES (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table USER_DOCUMENT_ACCESS 
-- 
ALTER TABLE ARCH.USER_DOCUMENT_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_ACCESS_FK1 
  FOREIGN KEY (COPY_ID) 
  REFERENCES ARCH.COPIES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_DOCUMENT_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_ACCESS_FK2 
  FOREIGN KEY (DOCUMENT_ID) 
  REFERENCES ARCH.DOCUMENTS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_DOCUMENT_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_ACCESS_FK3 
  FOREIGN KEY (USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_DOCUMENT_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_ACCESS_FK4 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.USER_DOCUMENT_ACCESS ADD (
  CONSTRAINT USER_DOCUMENT_ACCESS_FK5 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table ROLE_DOCUMENT_ACCESS 
-- 
ALTER TABLE ARCH.ROLE_DOCUMENT_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_ACCESS_FK1 
  FOREIGN KEY (COPY_ID) 
  REFERENCES ARCH.COPIES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_DOCUMENT_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_ACCESS_FK2 
  FOREIGN KEY (DOCUMENT_ID) 
  REFERENCES ARCH.DOCUMENTS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_DOCUMENT_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_ACCESS_FK4 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_DOCUMENT_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_ACCESS_FK5 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.ROLE_DOCUMENT_ACCESS ADD (
  CONSTRAINT ROLE_DOCUMENT_ACCESS_FK3 
  FOREIGN KEY (ROLE_ID) 
  REFERENCES ARCH.ROLES (ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table DOCUMENT_HISTORY 
-- 
ALTER TABLE ARCH.DOCUMENT_HISTORY ADD (
  CONSTRAINT DOCUMENT_HISTORY_FK2 
  FOREIGN KEY (COPY_ID) 
  REFERENCES ARCH.COPIES (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENT_HISTORY ADD (
  CONSTRAINT DOCUMENT_HISTORY_FK1 
  FOREIGN KEY (DOCUMENT_ID) 
  REFERENCES ARCH.DOCUMENTS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENT_HISTORY ADD (
  CONSTRAINT DOCUMENT_HISTORY_FK3 
  FOREIGN KEY (USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENT_HISTORY ADD (
  CONSTRAINT DOCUMENT_HISTORY_FK4 
  FOREIGN KEY (AUD_CREATE_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);

ALTER TABLE ARCH.DOCUMENT_HISTORY ADD (
  CONSTRAINT DOCUMENT_HISTORY_FK5 
  FOREIGN KEY (AUD_MODIFY_USER_ID) 
  REFERENCES ARCH.USERS (ID)
  ENABLE VALIDATE);


GRANT READ, WRITE ON DIRECTORY DATA_PUMP_DIR TO EXP_FULL_DATABASE;

GRANT READ, WRITE ON DIRECTORY DATA_PUMP_DIR TO IMP_FULL_DATABASE;